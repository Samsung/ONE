/*
 * Copyright (c) 2025 Samsung Electronics Co., Ltd. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef ONERT_MICRO_TEST_MODELS_REDUCE_MAX_KERNEL_H
#define ONERT_MICRO_TEST_MODELS_REDUCE_MAX_KERNEL_H

#include "TestDataReduceMaxBase.h"

namespace onert_micro
{
namespace test_model
{

namespace reduce_max_float
{
/*
 * ReduceMax Kernel:
 *
 *      Input(1, 8, 8, 4)   Axis (3)
 *                 \       /
 *                 ReduceMax
 *                     |
 *           Output(1, 8, 8, 1)
 */
const unsigned char test_kernel_model_circle[] = {
  0x18, 0x00, 0x00, 0x00, 0x43, 0x49, 0x52, 0x30, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x08, 0x00, 0x10, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff,
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x6c, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1b, 0x14, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0xa0, 0xff, 0xff, 0xff, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x6f, 0x66, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x61, 0x78, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x69, 0x66, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x11, 0x00, 0x00, 0x00,
  0x4f, 0x4e, 0x45, 0x2d, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x32, 0x63, 0x69, 0x72, 0x63, 0x6c,
  0x65, 0x00, 0x00, 0x00};

const std::vector<float> input_data = {
  -58.396225, -57.8394,   -22.581873, -7.3766093,  50.05206,    44.310944,   -22.120514,
  89.867386,  -91.13295,  -75.18169,  -33.539833,  54.117905,   -57.211536,  -75.14148,
  35.73325,   -53.776833, 78.74013,   96.87235,    18.837658,   -21.393923,  79.88659,
  93.544235,  -21.981659, 20.892723,  -67.582954,  92.50712,    -34.099873,  -98.411545,
  -3.2956834, -84.42002,  12.189543,  58.688896,   64.54378,    25.744835,   -62.094837,
  -40.566822, -14.790133, 88.69836,   -0.85036707, -75.469086,  -76.663185,  -73.1051,
  81.93762,   -36.66421,  22.026539,  78.44858,    -46.12408,   95.41604,    -2.5305836,
  -44.67528,  -31.300688, -77.539474, -57.611828,  88.97927,    91.47717,    -65.54501,
  13.034883,  20.921251,  -8.355765,  97.18682,    -46.770386,  -40.81952,   -11.165613,
  -61.271793, 48.646477,  -58.25151,  -99.41481,   -56.780544,  -91.58536,   29.882515,
  75.78485,   16.52929,   60.873188,  -88.43013,   71.16324,    -56.13273,   -77.14864,
  -96.57215,  -62.9608,   -82.15136,  -70.5029,    -57.31731,   -31.835693,  16.929976,
  -28.129372, 1.0691411,  -78.68238,  73.23079,    9.220803,    71.94672,    -41.762787,
  52.63332,   -3.018665,  -61.8149,   37.66296,    58.77569,    45.250633,   -60.578415,
  -17.983448, -72.786026, 92.85505,   21.268763,   51.62619,    -16.931017,  -82.45312,
  -14.521056, 37.67377,   0.43315408, -52.960613,  24.414982,   7.908148,    44.165127,
  -12.226681, 82.412865,  -76.48077,  25.110634,   75.99246,    -82.51244,   56.823624,
  -63.978146, 76.70215,   6.5520577,  43.948025,   77.97921,    66.8605,     -58.332287,
  -18.538721, 21.059021,  77.90356,   -60.71419,   -41.935356,  -96.56075,   32.188824,
  73.61105,   -65.56257,  11.194895,  -60.269417,  -34.02883,   13.059088,   -19.561983,
  -52.756477, 77.42064,   51.02234,   72.507164,   -14.971463,  -22.252535,  80.21801,
  17.34239,   -99.05458,  70.16757,   -53.11618,   -49.292202,  -10.7446995, -97.751434,
  15.030712,  24.94627,   15.125146,  65.612595,   -60.434036,  67.13268,    34.535175,
  47.78571,   -82.69534,  6.3039026,  83.856606,   -40.564785,  -24.283085,  2.700711,
  -34.432743, 94.35208,   87.09138,   48.820133,   -98.51997,   12.918642,   -99.678535,
  19.517574,  95.35628,   9.565377,   81.70518,    72.262695,   -64.77105,   63.354713,
  -24.879864, -35.13848,  29.116499,  -67.15977,   0.082829006, 23.524176,   83.07935,
  -17.429674, -53.3588,   -7.9096246, 51.51446,    -6.559965,   16.146408,   -70.894936,
  -6.540736,  47.5225,    -88.1789,   81.44994,    -54.391083,  27.788023,   5.2649994,
  -16.410364, -20.530712, 27.685137,  4.1711197,   -74.07635,   -75.02475,   35.800602,
  5.787267,   -31.852463, -31.70899,  -64.29493,   -10.572503,  87.88721,    13.402711,
  97.945244,  -48.55172,  -69.19836,  -26.148186,  -0.15473571, -22.69506,   7.7602525,
  82.74399,   -73.62917,  44.55469,   -40.60742,   84.94042,    75.093544,   54.614388,
  -86.34934,  87.09241,   -71.10903,  18.455446,   94.97241,    -21.166073,  83.72585,
  70.848335,  -74.588745, 72.356,     -43.17074,   -60.627457,  4.996212,    67.50039,
  83.59536,   -55.00903,  39.611755,  43.5844,     61.593533,   45.228355,   -30.009733,
  -49.846306, 27.54924,   85.339745,  -96.16337};
const std::vector<float> reference_output_data = {
  -7.3766093, 89.867386, 54.117905, 35.73325,  96.87235,   93.544235, 92.50712,  58.688896,
  64.54378,   88.69836,  81.93762,  95.41604,  -2.5305836, 91.47717,  97.18682,  -11.165613,
  48.646477,  75.78485,  71.16324,  -62.9608,  16.929976,  73.23079,  71.94672,  58.77569,
  45.250633,  92.85505,  37.67377,  44.165127, 82.412865,  75.99246,  77.97921,  66.8605,
  77.90356,   73.61105,  13.059088, 77.42064,  80.21801,   70.16757,  24.94627,  67.13268,
  47.78571,   83.856606, 94.35208,  19.517574, 95.35628,   63.354713, 29.116499, 83.07935,
  51.51446,   81.44994,  27.788023, 27.685137, 35.800602,  87.88721,  97.945244, 7.7602525,
  82.74399,   84.94042,  94.97241,  83.72585,  72.356,     83.59536,  61.593533, 85.339745};

} // namespace reduce_max_float

namespace reduce_max_float_4d_axis_1_2
{
/*
 * ReduceMax Kernel: (keepDims = False)
 *
 *      Input(1, 4, 4, 2)    Axis(1,2)
 *           \                  /
 *                ReduceMax
 *                   |
 *             Output(1, 2)
 */
const unsigned char test_kernel_model_circle[] = {
  0x18, 0x00, 0x00, 0x00, 0x43, 0x49, 0x52, 0x30, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x08, 0x00, 0x10, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xd4, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x6c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x76, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00,
  0x08, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x32, 0x2e, 0x31, 0x33, 0x2e, 0x31, 0x00, 0x00, 0xda, 0xff, 0xff, 0xff,
  0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x31, 0x31, 0x2e, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xb8, 0xfe, 0xff, 0xff,
  0xbc, 0xfe, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x18, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
  0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x74, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
  0x4d, 0x61, 0x78, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x14, 0x00, 0x13, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x24, 0x00, 0x00, 0x00, 0xb4, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
  0x4d, 0x61, 0x78, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
  0x64, 0x69, 0x63, 0x65, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52,
  0x11, 0x00, 0x00, 0x00, 0x4f, 0x4e, 0x45, 0x2d, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x32, 0x63,
  0x69, 0x72, 0x63, 0x6c, 0x65, 0x00, 0x00, 0x00};

const std::vector<float> input_data = {
  89.867386,  -91.13295,  -75.18169,  -33.539833,  35.73325,   -53.776833, 78.74013,  96.87235,
  93.544235,  -21.981659, 20.892723,  -67.582954,  -3.2956834, -84.42002,  12.189543, 58.688896,
  -40.566822, -14.790133, 88.69836,   -0.85036707, 81.93762,   -36.66421,  22.026539, 78.44858,
  -44.67528,  -31.300688, -77.539474, -57.611828,  13.034883,  20.921251,  -8.355765, 97.18682};
const std::vector<float> reference_output_data = {93.544235, 97.18682};

} // namespace reduce_max_float_4d_axis_1_2

namespace reduce_max_float_3d_axis_1
{
/*
 * ReduceMax Kernel: (keepDims = False)
 *
 *      Input(1, 4, 4)    Axis(1)
 *           \               /
 *                ReduceMax
 *                   |
 *             Output(1, 4)
 */
const unsigned char test_kernel_model_circle[] = {
  0x18, 0x00, 0x00, 0x00, 0x43, 0x49, 0x52, 0x30, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x08, 0x00, 0x10, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xd0, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0xbc, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x6c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x76, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00,
  0x08, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x32, 0x2e, 0x31, 0x33, 0x2e, 0x31, 0x00, 0x00, 0xda, 0xff, 0xff, 0xff,
  0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x31, 0x31, 0x2e, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xbc, 0xfe, 0xff, 0xff, 0xc0, 0xfe, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x14, 0x00,
  0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0c, 0x00,
  0x07, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x86, 0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x78, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x4d, 0x61, 0x78, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x18, 0x00, 0x14, 0x00, 0x13, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x24, 0x00, 0x00, 0x00, 0xb8, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x4d, 0x61, 0x78, 0x2f,
  0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
  0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
  0x64, 0x65, 0x72, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x52, 0x11, 0x00, 0x00, 0x00, 0x4f, 0x4e, 0x45, 0x2d, 0x74, 0x66, 0x6c, 0x69,
  0x74, 0x65, 0x32, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x00, 0x00, 0x00};

const std::vector<float> input_data = {
  -40.566822, -14.790133, 88.69836,   -0.85036707, 81.93762,  -36.66421, 22.026539, 78.44858,
  -44.67528,  -31.300688, -77.539474, -57.611828,  13.034883, 20.921251, -8.355765, 97.18682};
const std::vector<float> reference_output_data = {81.93762, 20.921251, 88.69836, 97.18682};

} // namespace reduce_max_float_3d_axis_1

class TestDataFloatReduceMax : public TestDataReduceMaxBase<float>
{
public:
  TestDataFloatReduceMax()
  {
    _input_data = reduce_max_float::input_data;
    _reference_output_data = reduce_max_float::reference_output_data;
    _test_kernel_model_circle = reduce_max_float::test_kernel_model_circle;
  }

  ~TestDataFloatReduceMax() override = default;
};

class TestDataFloatReduceMax4D_2axis : public TestDataReduceMaxBase<float>
{
public:
  TestDataFloatReduceMax4D_2axis()
  {
    _input_data = reduce_max_float_4d_axis_1_2::input_data;
    _reference_output_data = reduce_max_float_4d_axis_1_2::reference_output_data;
    _test_kernel_model_circle = reduce_max_float_4d_axis_1_2::test_kernel_model_circle;
  }

  ~TestDataFloatReduceMax4D_2axis() override = default;
};

class TestDataFloatReduceMax3D : public TestDataReduceMaxBase<float>
{
public:
  TestDataFloatReduceMax3D()
  {
    _input_data = reduce_max_float_3d_axis_1::input_data;
    _reference_output_data = reduce_max_float_3d_axis_1::reference_output_data;
    _test_kernel_model_circle = reduce_max_float_3d_axis_1::test_kernel_model_circle;
  }

  ~TestDataFloatReduceMax3D() override = default;
};

} // namespace test_model
} // namespace onert_micro

#endif // ONERT_MICRO_TEST_MODELS_REDUCE_MAX_KERNEL_H
