#!/bin/bash

# Copyright (c) 2025 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE this file is used to prepare venv for local circle-mlir development.

# NOTE check if we can use python3.10 for Ubuntu 20.04.
# use +e as python3.10 may not exist in the system and 'command' will return error.
set +e

PYTHON_CANDIDATES=("python3.12" "python3.10" "python3")
for py in "${PYTHON_CANDIDATES[@]}"; do
  PYTHON3_EXEC=$(command -v "$py")
  if [[ -n "${PYTHON3_EXEC}" ]]; then
    break
  fi
done
if [[ -z "${PYTHON3_EXEC}" ]]; then
  echo "Error one-prepare-venv: python3 not found"
  exit 1
fi

set -e

DRIVER_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -z "$VENV_NAME" ]]; then
  VENV_NAME="venv"
fi

VENV_ACTIVATE=${DRIVER_PATH}/${VENV_NAME}/bin/activate
# NOTE please use venv's python instead of python after `source activation`.
VENV_PYTHON=${DRIVER_PATH}/${VENV_NAME}/bin/python

if [ ! -f ${VENV_ACTIVATE} ]; then
  # Create python virtual enviornment
  ${PYTHON3_EXEC} -m venv "${DRIVER_PATH}/${VENV_NAME}"
fi

# NOTE version
# - https://github.com/onnx/onnx/blob/master/docs/Versioning.md
# - https://github.com/Samsung/ONE/issues/15226#issuecomment-2829062592

VER_TORCH=2.7.0+cpu
VER_ONNX=1.17.0
VER_ONNXRUNTIME=1.21.1
VER_NUMPY=1.26.4

PYTHON_VERSION=$($VENV_PYTHON -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
echo "python3 version is $PYTHON_VERSION"

if [[ "$PYTHON_VERSION" == "3.10" ]]; then
  # Ubuntu 22.04 is python3.10
  : # use as is
elif [[ "$PYTHON_VERSION" == "3.12" ]]; then
  # Ubuntu 24.04 is python3.12
  : # use as is
else
  echo "Error prepare-venv: Unsupported python version: $PYTHON_VERSION"
  exit 1
fi

PIP_TRUSTED_HOST="--trusted-host pypi.org "
PIP_TRUSTED_HOST+="--trusted-host pypi.python.org "
PIP_TRUSTED_HOST+="--trusted-host files.pythonhosted.org "
PIP_TRUSTED_HOST+="--trusted-host download.pytorch.org "

PIP_TIMEOUT="--default-timeout=1000 "

PIP_OPTIONS="${PIP_TIMEOUT} ${PIP_TRUSTED_HOST}"

# NOTE $PREPVENV_PIP_OPTION is to provide additional PIP options
# such as ceritificate file behind firewall
# ex) PREPVENV_PIP_OPTION="--cert SomePrivateCetificate.crt" ./prepare-venv
if [[ ! -z "$PREPVENV_PIP_OPTION" ]]; then
  PIP_OPTIONS+=" ${PREPVENV_PIP_OPTION} "
fi

PYTHON_PACKAGES="torch==${VER_TORCH} "
PYTHON_PACKAGES+="onnx==${VER_ONNX} "
PYTHON_PACKAGES+="onnxruntime==${VER_ONNXRUNTIME} "
PYTHON_PACKAGES+="h5py==3.8.0 "
PYTHON_PACKAGES+="einops "
PYTHON_PACKAGES+="numpy==${VER_NUMPY} "

TORCH_SOURCE_OPTION="-f https://download.pytorch.org/whl/torch"

${VENV_PYTHON} -m pip ${PIP_OPTIONS} install --upgrade pip setuptools

${VENV_PYTHON} -m pip ${PIP_OPTIONS} install --upgrade ${PYTHON_PACKAGES} ${TORCH_SOURCE_OPTION}
