if(NOT CIRCLE_MLIR_WORKDIR)
  if(NOT CIRCLE_MLIR_LOCALINST)
    # for local build
    set(LLVM_INST_DIR "${EXTERNALS_BIN_DIR}/llvm-project-install")
    set(ONNXMLIR_SRC "${CMAKE_SOURCE_DIR}/externals/onnx-mlir")
    set(ONNXMLIR_BLD "${EXTERNALS_BIN_DIR}/onnx-mlir-build")
    set(ONNXMLIR_INS "${EXTERNALS_BIN_DIR}/onnx-mlir-install")
    set(PROTOBUF_INS "${EXTERNALS_BIN_DIR}//protobuf-install")
  else()
    set(LLVM_INST_DIR "${CIRCLE_MLIR_LOCALINST}/llvm-project-install")
    set(ONNXMLIR_SRC "${CMAKE_SOURCE_DIR}/externals/onnx-mlir")
    set(ONNXMLIR_BLD "${CIRCLE_MLIR_LOCALINST}/onnx-mlir-build")
    set(ONNXMLIR_INS "${CIRCLE_MLIR_LOCALINST}/onnx-mlir-install")
    set(PROTOBUF_INS "${CIRCLE_MLIR_LOCALINST}/protobuf-install")
  endif()
else()
  # for CI or with Docker build
  set(LLVM_INST_DIR "${CIRCLE_MLIR_WORKDIR}")
  set(ONNXMLIR_SRC "${CIRCLE_MLIR_WORKDIR}/onnx-mlir")
  set(ONNXMLIR_BLD "${CIRCLE_MLIR_WORKDIR}/onnx-mlir-build")
  set(ONNXMLIR_INS "${CIRCLE_MLIR_WORKDIR}")
  set(PROTOBUF_INS "/usr/local")
  message(STATUS "LLVM_INST_DIR is set to ${LLVM_INST_DIR}")
endif()
set(LLVM_INST_INC "${LLVM_INST_DIR}/include")

set(LLVM_DIR "${LLVM_INST_DIR}/lib/cmake/llvm")
set(MLIR_DIR "${LLVM_INST_DIR}/lib/cmake/mlir")
find_package(LLVM REQUIRED CONFIG)
find_package(MLIR REQUIRED CONFIG)

list(APPEND CMAKE_MODULE_PATH ${LLVM_DIR})
list(APPEND CMAKE_MODULE_PATH ${MLIR_DIR})
include(AddLLVM)
include(AddMLIR)
include(TableGen)

# call to use MLIR
macro(cir_mlir_static_flags TARGET_LIB)
  llvm_update_compile_flags(${TARGET_LIB})
  target_include_directories(${TARGET_LIB} PUBLIC ${LLVM_INST_INC})
  target_link_directories(${TARGET_LIB} PUBLIC ${LLVM_INST_DIR}/lib)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRIR)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRAffineDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRFuncDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRLinalgDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRLLVMDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRMathDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRMemRefDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRSCFDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRShapeDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRQuantDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRVectorDialect)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRDialectUtils)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIROptLib)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRSupport)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRLLVMCommonConversion)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRAffineUtils)
endmacro(cir_mlir_static_flags)

# call to use ONNX-MLIR
macro(cir_onnx_static_flags TARGET_LIB)
  target_include_directories(${TARGET_LIB} PRIVATE ${ONNXMLIR_SRC})
  target_include_directories(${TARGET_LIB} PRIVATE ${ONNXMLIR_BLD})
  target_link_directories(${TARGET_LIB} PUBLIC ${ONNXMLIR_INS}/lib)
  target_link_libraries(${TARGET_LIB} PUBLIC OMKrnlOps)
  target_link_libraries(${TARGET_LIB} PUBLIC OMONNXOps)
  target_link_libraries(${TARGET_LIB} PUBLIC OMMlirDialects)
  target_link_libraries(${TARGET_LIB} PUBLIC OMDiagnostic)
  target_link_libraries(${TARGET_LIB} PUBLIC OMSupport)
  target_link_libraries(${TARGET_LIB} PUBLIC OMMlirUtilities)
  target_link_libraries(${TARGET_LIB} PUBLIC OMShapeInferencePass)
  target_link_libraries(${TARGET_LIB} PUBLIC OMShapeInference)
  target_link_libraries(${TARGET_LIB} PUBLIC OMShapeInferenceOpInterface)
  target_link_libraries(${TARGET_LIB} PUBLIC OMShapeHelperOpInterface)
  target_link_libraries(${TARGET_LIB} PUBLIC OMONNXRewrite)
  target_link_libraries(${TARGET_LIB} PUBLIC OMONNXElementsAttr)  
  target_link_libraries(${TARGET_LIB} PUBLIC OMTensorUtils)
  target_link_libraries(${TARGET_LIB} PUBLIC OMONNXStandardFuncReturnPass)
endmacro(cir_onnx_static_flags)

macro(cir_onnx_tools_flags TARGET_LIB)
  # NOTE ONNX_ML definition is used to build onnx-mlir and needed to match
  #      related header files
  target_compile_definitions(${TARGET_LIB} PRIVATE "ONNX_ML=1")
  target_include_directories(${TARGET_LIB} PRIVATE ${ONNXMLIR_SRC}/include)
  target_include_directories(${TARGET_LIB} PRIVATE ${ONNXMLIR_INS}/include)
  target_include_directories(${TARGET_LIB} PRIVATE ${PROTOBUF_INS}/include)
  target_link_libraries(${TARGET_LIB} PUBLIC OMCompilerOptions)
  target_link_libraries(${TARGET_LIB} PUBLIC OMBuilder)
  target_link_libraries(${TARGET_LIB} PUBLIC OMAccelerator)
  target_link_libraries(${TARGET_LIB} PUBLIC OMHasOnnxSubgraphOpInterface)
  target_link_libraries(${TARGET_LIB} PUBLIC OMResultTypeInferenceOpInterface)
  target_link_libraries(${TARGET_LIB} PUBLIC onnx)
  target_link_libraries(${TARGET_LIB} PUBLIC onnx_proto)
  target_link_directories(${TARGET_LIB} PUBLIC ${PROTOBUF_INS}/lib)
  # force static link with protobuf library. this will simplify version mismatch
  # with different Ubuntu versions and building Debian package.
  target_link_libraries(${TARGET_LIB} PUBLIC libprotobuf.a)
endmacro(cir_onnx_tools_flags)

# call to use MLIR TableGen
macro(cir_mlir_tablegen_flags TARGET_LIB)
  llvm_update_compile_flags(${TARGET_LIB})
  target_include_directories(${TARGET_LIB} PUBLIC ${LLVM_INST_INC})
  target_link_libraries(${TARGET_LIB} PUBLIC LLVMSupport)
  target_link_libraries(${TARGET_LIB} PUBLIC LLVMTableGen)
  target_link_libraries(${TARGET_LIB} PUBLIC MLIRTableGen)
endmacro(cir_mlir_tablegen_flags)
