# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onert_tflite

import flatbuffers


class BatchMatMulOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBatchMatMulOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BatchMatMulOptions()
        x.Init(buf, n + offset)
        return x

    # BatchMatMulOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BatchMatMulOptions
    def AdjointLhs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BatchMatMulOptions
    def AdjointRhs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False


def BatchMatMulOptionsStart(builder):
    builder.StartObject(2)


def BatchMatMulOptionsAddAdjointLhs(builder, adjointLhs):
    builder.PrependBoolSlot(0, adjointLhs, 0)


def BatchMatMulOptionsAddAdjointRhs(builder, adjointRhs):
    builder.PrependBoolSlot(1, adjointRhs, 0)


def BatchMatMulOptionsEnd(builder):
    return builder.EndObject()
