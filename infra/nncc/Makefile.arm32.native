BUILD_TYPE?=Debug

CURRENT_DIR=$(shell pwd)
BUILDFOLDER=build
ARM32_FOLDER=arm32
#ROOTFS_ARM?=$(CURRENT_DIR)/tools/cross/rootfs/arm

TYPE_FOLDER=$(shell echo $(BUILD_TYPE) | tr A-Z a-z)

BUILD_ARM32_FOLDER=$(BUILDFOLDER)/$(ARM32_FOLDER).$(TYPE_FOLDER)
BUILD_ARM32_HOST=$(BUILDFOLDER)/$(ARM32_FOLDER).$(TYPE_FOLDER).host

ARM32_INSTALL_FOLDER=$(CURRENT_DIR)/$(BUILDFOLDER)/$(ARM32_FOLDER).$(TYPE_FOLDER).install
ARM32_INSTALL_HOST=$(CURRENT_DIR)/$(BUILDFOLDER)/$(ARM32_FOLDER).$(TYPE_FOLDER).host.install

# ARM32 build
ARM32_BUILD_ITEMS:=angkor;cwrap;pepper-str;pepper-strcast;pp
ARM32_BUILD_ITEMS+=;pepper-csv2vec;crew
ARM32_BUILD_ITEMS+=;oops;pepper-assert
ARM32_BUILD_ITEMS+=;hermes;hermes-std
ARM32_BUILD_ITEMS+=;loco;locop;locomotiv;logo-core;logo
ARM32_BUILD_ITEMS+=;safemain;mio-circle;mio-tflite260
ARM32_BUILD_ITEMS+=;foder;circle-verify;souschef;arser;vconone
ARM32_BUILD_ITEMS+=;luci
ARM32_BUILD_ITEMS+=;luci-interpreter
ARM32_BUILD_ITEMS+=;tflite2circle
ARM32_BUILD_ITEMS+=;tflchef;circlechef
ARM32_BUILD_ITEMS+=;circle2circle;record-minmax;circle-quantizer
# TODO add common-artifacts (this requires python venv with TensorFlow)

#ARM32_TOOLCHAIN_FILE=cmake/buildtool/cross/toolchain_armv7l-linux.cmake # remove this for native build

ARM32_HOST_ITEMS:=cwrap;pepper-str;pepper-strcast
ARM32_HOST_ITEMS+=;hermes;hermes-std
ARM32_HOST_ITEMS+=;mio-circle;mio-tflite260
ARM32_HOST_ITEMS+=;foder;circle-verify;souschef;arser;vconone
ARM32_HOST_ITEMS+=;tflite2circle
ARM32_HOST_ITEMS+=;safemain;tflchef;circlechef
ARM32_HOST_ITEMS+=;circle-tensordump


_SPACE_:=
_SPACE_+=
ARM32_BUILD_WHITELIST=$(subst $(_SPACE_),,$(ARM32_BUILD_ITEMS))
ARM32_HOST_WHITELIST=$(subst $(_SPACE_),,$(ARM32_HOST_ITEMS))

NNCC_CFG_OPTION+= -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)

NNCC_EXCLUDE_OPTION+= -DBUILD_COMPILER_NNC=OFF

NNCC_CFG_STRICT= -DENABLE_STRICT_BUILD=ON

INT_TARGETS:=int_configure_arm32 int_configure_arm32_host \
  int_build_arm32 int_build_arm32_host

NNCC_ARM32_DEBUG= -DBUILD_WHITELIST="$(ARM32_BUILD_WHITELIST)"
NNCC_ARM32_DEBUG_HOST= -DBUILD_WHITELIST="$(ARM32_HOST_WHITELIST)"

DEF_TARGETS:=all

VAL_TARGETS:=cfg debug

.PHONY: $(INT_TARGETS) $(DEF_TARGETS) $(VAL_TARGETS)

.DEFAULT_GOAL: help

help:
	@echo "cfg      : debug configure"
	@echo "debug    : debug build"

###############################################################################
# do not call int_xxxx directly as the depend on environment variables

#
# configures
#

int_configure_arm32_host:
	NNCC_WORKSPACE=$(BUILD_ARM32_HOST) ./nncc configure \
		$(NNCC_CFG_OPTION) \
		$(NNCC_EXCLUDE_OPTION) \
		$(NNCC_ARM32_DEBUG_HOST) $(NNCC_CFG_STRICT) -DENABLE_COVERAGE=OFF \
		-DCMAKE_INSTALL_PREFIX="$(ARM32_INSTALL_HOST)" \
		-DENABLE_TEST=ON

int_configure_arm32:
	ROOTFS_DIR=$(ROOTFS_ARM) TARGET_ARCH=armv7l \
	BUILD_HOST_EXEC=$(CURRENT_DIR)/$(BUILD_ARM32_HOST) \
	NNCC_WORKSPACE=$(BUILD_ARM32_FOLDER) ./nncc configure \
		$(NNCC_CFG_OPTION) \
		$(NNCC_EXCLUDE_OPTION) \
		$(NNCC_ARM32_DEBUG) $(NNCC_CFG_STRICT) -DENABLE_COVERAGE=OFF \
		-DCMAKE_TOOLCHAIN_FILE=$(ARM32_TOOLCHAIN_FILE) \
		-DCMAKE_INSTALL_PREFIX="$(ARM32_INSTALL_FOLDER)" \
		-DENABLE_TEST=ON


#
# builds
#
int_build_arm32_host:
	BUILD_HOST_EXEC=$(BUILD_ARM32_HOST) \
	NNCC_WORKSPACE=$(BUILD_ARM32_HOST) ./nncc build -j1

int_build_arm32:
	ROOTFS_DIR=$(ROOTFS_ARM) TARGET_ARCH=armv7l \
	BUILD_HOST_EXEC=$(CURRENT_DIR)/$(BUILD_ARM32_HOST) \
	NNCC_WORKSPACE=$(BUILD_ARM32_FOLDER) ./nncc build -j1


#
# tests: must run in ARM32 Ubuntu 18.04 device
#
int_test:
	LUCI_LOG=100 \
	NNCC_WORKSPACE=$(BUILD_ARM32_FOLDER) ./nncc test \
	-E ".*_remote_test|record_minmax_conversion_test|pota_*"

################################################################################

all: int_configure_arm32_host int_build_arm32_host int_configure_arm32 int_build_arm32

cfg: int_configure_arm32_host int_build_arm32_host int_configure_arm32

debug: int_build_arm32

# Run test in ARM32 Ubuntu 18.04 device
test: int_test
