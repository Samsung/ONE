if(BUILD_TENSORFLOW_LITE_2_3_0)
  macro(return_unless VAR)
  if(NOT ${VAR})
    message("${VAR} NOT TRUE")
    set(TensorFlowLite_2_3_0_FOUND PARENT_SCOPE)
    return()
  endif(NOT ${VAR})
  endmacro(return_unless)

  nnas_include(ExternalSourceTools)
  nnas_include(OptionTools)

  # Below urls come from https://github.com/tensorflow/tensorflow/blob/v2.3.0/tensorflow/lite/tools/make/Makefile

  set(absl_url "https://github.com/abseil/abseil-cpp/archive/df3ea785d8c30a9503321a3d35ee7d35808f190d.tar.gz")
  ExternalSource_Download("TFLiteVanilla_Absl" ${absl_url})
  set(TFLiteVanillaAbslSource_DIR "${TFLiteVanilla_Absl_SOURCE_DIR}")
  if (NOT TFLiteVanillaAbslSource_DIR STREQUAL "")
    set(TFLiteVanillaAbslSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaAbslSource_FOUND)

  set(eigen_url "https://gitlab.com/libeigen/eigen/-/archive/386d809bde475c65b7940f290efe80e6a05878c4/eigen-386d809bde475c65b7940f290efe80e6a05878c4.tar.gz")
  ExternalSource_Download("TFLiteVanilla_Eigen" ${eigen_url})
  set(TFLiteVanillaEigenSource_DIR "${TFLiteVanilla_Eigen_SOURCE_DIR}")
  if (NOT TFLiteVanillaEigenSource_DIR STREQUAL "")
    set(TFLiteVanillaEigenSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaEigenSource_FOUND)

  set(farmhash_url "https://storage.googleapis.com/mirror.tensorflow.org/github.com/google/farmhash/archive/816a4ae622e964763ca0862d9dbd19324a1eaf45.tar.gz")
  ExternalSource_Download("TFLiteVanilla_Farmhash" ${farmhash_url})
  set(TFLiteVanillaFarmhashSource_DIR "${TFLiteVanilla_Farmhash_SOURCE_DIR}")
  if (NOT TFLiteVanillaFarmhashSource_DIR STREQUAL "")
    set(TFLiteVanillaFarmhashSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaFarmhashSource_FOUND)

  set(fft2d_url "https://storage.googleapis.com/mirror.tensorflow.org/github.com/petewarden/OouraFFT/archive/v1.0.tar.gz")
  ExternalSource_Download("TFLiteVanilla_FFT2D" ${fft2d_url})
  set(TFLiteVanillaFFT2DSource_DIR "${TFLiteVanilla_FFT2D_SOURCE_DIR}")
  if (NOT TFLiteVanillaFFT2DSource_DIR STREQUAL "")
    set(TFLiteVanillaFFT2DSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaFFT2DSource_FOUND)

  set(flatbuffers_url "https://storage.googleapis.com/mirror.tensorflow.org/github.com/google/flatbuffers/archive/v1.12.0.tar.gz")
  ExternalSource_Download("TFLiteVanilla_FlatBuffers" ${flatbuffers_url})
  set(TFLiteVanillaFlatBuffersSource_DIR "${TFLiteVanilla_FlatBuffers_SOURCE_DIR}")
  if (NOT TFLiteVanillaFlatBuffersSource_DIR STREQUAL "")
    set(TFLiteVanillaFlatBuffersSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaFlatBuffersSource_FOUND)

  set(fp16_url "https://github.com/Maratyszcza/FP16/archive/4dfe081cf6bcd15db339cf2680b9281b8451eeb3.zip")
  ExternalSource_Download("TFLiteVanilla_FP16" ${fp16_url})
  set(TFLiteVanillaFP16Source_DIR "${TFLiteVanilla_FP16_SOURCE_DIR}")
  if (NOT TFLiteVanillaFP16Source_DIR STREQUAL "")
    set(TFLiteVanillaFP16Source_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaFP16Source_FOUND)

  set(gemmlowp_url "https://storage.googleapis.com/mirror.tensorflow.org/github.com/google/gemmlowp/archive/fda83bdc38b118cc6b56753bd540caa49e570745.zip")
  ExternalSource_Download("TFLiteVanilla_GEMMLowp" ${gemmlowp_url})
  set(TFLiteVanillaGEMMLowpSource_DIR "${TFLiteVanilla_GEMMLowp_SOURCE_DIR}")
  if (NOT TFLiteVanillaGEMMLowpSource_DIR STREQUAL "")
    set(TFLiteVanillaGEMMLowpSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaGEMMLowpSource_FOUND)

  set(neon2sse_url "https://github.com/intel/ARM_NEON_2_x86_SSE/archive/1200fe90bb174a6224a525ee60148671a786a71f.tar.gz")
  ExternalSource_Download("TFLiteVanilla_NEON2SSE" ${neon2sse_url})
  set(TFLiteVanillaNEON2SSESource_DIR "${TFLiteVanilla_NEON2SSE_SOURCE_DIR}")
  if (NOT TFLiteVanillaNEON2SSESource_DIR STREQUAL "")
    set(TFLiteVanillaNEON2SSESource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaNEON2SSESource_FOUND)

  set(tensorflow_url "https://github.com/tensorflow/tensorflow/archive/v2.3.0.tar.gz")
  ExternalSource_Download("TFLiteVanilla_TensorFlow" ${tensorflow_url})
  set(TFLiteVanillaTensorFlowSource_DIR "${TFLiteVanilla_TensorFlow_SOURCE_DIR}")
  if (NOT TFLiteVanillaTensorFlowSource_DIR STREQUAL "")
    set(TFLiteVanillaTensorFlowSource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaTensorFlowSource_FOUND)

  set(ruy_url "https://github.com/google/ruy/archive/34ea9f4993955fa1ff4eb58e504421806b7f2e8f.zip")
  ExternalSource_Download("TFLiteVanilla_Ruy" ${ruy_url})
  set(TFLiteVanillaRuySource_DIR "${TFLiteVanilla_Ruy_SOURCE_DIR}")
  if (NOT TFLiteVanillaRuySource_DIR STREQUAL "")
    set(TFLiteVanillaRuySource_FOUND TRUE)
  endif()
  return_unless(TFLiteVanillaRuySource_FOUND)

  nnfw_find_package(CpuInfo QUIET)
  if (NOT CpuInfo_FOUND)
    message(STATUS "TFLiteVanillaRun: CPUINFO not found")
    set(TensorFlowLite_2_3_0_FOUND FALSE PARENT_SCOPE)
    return()
  endif(NOT CpuInfo_FOUND)

  nnas_include(ExternalProjectTools)
  add_extdirectory("${CMAKE_CURRENT_LIST_DIR}/TensorFlowLite-2.3.0" tflite-2.3.0)

  set(TensorFlowLite_2_3_0_FOUND TRUE)
  return()
endif()
