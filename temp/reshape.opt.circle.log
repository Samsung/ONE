/usr/local/bin/circle2circle reshape.circle reshape.opt.circle --verbose
[luci] NodeFinder INPUT(0) = 0x5568adf04be0
[luci] NodeFinder const_node(1) -> 0x5568adf06270 2
[luci] NodeFinder OUTPUT(2) = 0x5568adf06850
--- graph dump begin -------------------------------------------
Name: main
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--- graph dump end ---------------------------------------------
--- FixInterGraph main-------------------------
--- ValidateGraphProp main---------------------
--- post_import_graph done -------------------------------------
==============================================================
ModulePhaseRunner<Restart>
Initial graphs
graphs #0
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_x:0
  before: [?,3,4]
[luci] shape: serving_default_x:0
              own_shape: [1,3,4] -> infer: [?,3,4]
 after: [?,3,4]
[CircleShapeInference] arith.constant
  before: [2]
[luci] shape: arith.constant
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
node->shape(): 0x5568adf06270
const_shape_node: 0x5568adf06270
const_shape_node is NOT nullptr
const_shape_node->size<S32>(): 2
shape_by_input.dim(0).known(): 1
shape_by_input.dim(0).value(): 4294967295
shape_by_input.dim(1).known(): 1
shape_by_input.dim(1).value(): 4
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [?,4]
   shape_by_attr : []
|||||||||||||||||||||||||||||||||||||||||||||||||||||
shape_by_input: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
 after: [?,4]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
[luci] shape: PartitionedCall:0
              own_shape: [1,4] -> infer: [?,4]
 after: [?,4]
After luci::CircleShapeInferencePass (changed: Y)
graphs #0
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_x:0
  before: [?,3,4]
[luci] shape: serving_default_x:0
              own_shape: [1,3,4] -> infer: [?,3,4]
 after: [?,3,4]
[CircleShapeInference] arith.constant
  before: [2]
[luci] shape: arith.constant
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
node->shape(): 0x5568adf06270
const_shape_node: 0x5568adf06270
const_shape_node is NOT nullptr
const_shape_node->size<S32>(): 2
shape_by_input.dim(0).known(): 1
shape_by_input.dim(0).value(): 4294967295
shape_by_input.dim(1).known(): 1
shape_by_input.dim(1).value(): 4
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [?,4]
   shape_by_attr : []
|||||||||||||||||||||||||||||||||||||||||||||||||||||
shape_by_input: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
 after: [?,4]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
[luci] shape: PartitionedCall:0
              own_shape: [1,4] -> infer: [?,4]
 after: [?,4]
After luci::CircleShapeInferencePass (changed: N)
graphs #0
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_x:0
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 9
   after: 9
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
graphs #0
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

ModulePhaseRunner<Restart> - done
==============================================================
luci::PhaseRunner<Restart>
Initial graph
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_x:0
  before: [?,3,4]
[luci] shape: serving_default_x:0
              own_shape: [1,3,4] -> infer: [?,3,4]
 after: [?,3,4]
[CircleShapeInference] arith.constant
  before: [2]
[luci] shape: arith.constant
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
node->shape(): 0x5568adf06270
const_shape_node: 0x5568adf06270
const_shape_node is NOT nullptr
const_shape_node->size<S32>(): 2
shape_by_input.dim(0).known(): 1
shape_by_input.dim(0).value(): 4294967295
shape_by_input.dim(1).known(): 1
shape_by_input.dim(1).value(): 4
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [?,4]
   shape_by_attr : []
|||||||||||||||||||||||||||||||||||||||||||||||||||||
shape_by_input: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
 after: [?,4]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
[luci] shape: PartitionedCall:0
              own_shape: [1,4] -> infer: [?,4]
 after: [?,4]
After luci::CircleShapeInferencePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_x:0
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 9
   after: 9
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CanonicalizePass
After luci::CanonicalizePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before RemoveDeadNodeWithQueryPass
After RemoveDeadNodeWithQueryPass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

luci::PhaseRunner<Restart> - done
==============================================================
luci::PhaseRunner<Restart>
Initial graph
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before RemoveDeadNodeWithQueryPass
After RemoveDeadNodeWithQueryPass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_x:0
  before: [?,3,4]
[luci] shape: serving_default_x:0
              own_shape: [1,3,4] -> infer: [?,3,4]
 after: [?,3,4]
[CircleShapeInference] arith.constant
  before: [2]
[luci] shape: arith.constant
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
node->shape(): 0x5568adf06270
const_shape_node: 0x5568adf06270
const_shape_node is NOT nullptr
const_shape_node->size<S32>(): 2
shape_by_input.dim(0).known(): 1
shape_by_input.dim(0).value(): 4294967295
shape_by_input.dim(1).known(): 1
shape_by_input.dim(1).value(): 4
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [?,4]
   shape_by_attr : []
|||||||||||||||||||||||||||||||||||||||||||||||||||||
shape_by_input: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
 after: [?,4]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
[luci] shape: PartitionedCall:0
              own_shape: [1,4] -> infer: [?,4]
 after: [?,4]
After luci::CircleShapeInferencePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_x:0
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 9
   after: 9
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::XpSepActFromTransposeConvPass
After luci::XpSepActFromTransposeConvPass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

luci::PhaseRunner<Restart> - done
Unknown dimension is matched with known dimension
==============================================================
luci::PhaseRunner<Restart>
Initial graph
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_x:0
  before: [?,3,4]
[luci] shape: serving_default_x:0
              own_shape: [1,3,4] -> infer: [?,3,4]
 after: [?,3,4]
[CircleShapeInference] arith.constant
  before: [2]
[luci] shape: arith.constant
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
node->shape(): 0x5568adf06270
const_shape_node: 0x5568adf06270
const_shape_node is NOT nullptr
const_shape_node->size<S32>(): 2
shape_by_input.dim(0).known(): 1
shape_by_input.dim(0).value(): 4294967295
shape_by_input.dim(1).known(): 1
shape_by_input.dim(1).value(): 4
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [?,4]
   shape_by_attr : []
|||||||||||||||||||||||||||||||||||||||||||||||||||||
shape_by_input: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||
output_shape: [?,4]
|||||||||||||||||||||||||||||||||||||||||||||||||||||
 after: [?,4]
[CircleShapeInference] PartitionedCall:0
  before: [?,4]
[luci] shape: PartitionedCall:0
              own_shape: [1,4] -> infer: [?,4]
 after: [?,4]
After luci::CircleShapeInferencePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_x:0
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 9
   after: 9
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
[CircleTypeInference] PartitionedCall:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
In #0 { name: serving_default_x:0, shape: [ ? x 3 x 4 ] }
Out #0 { name: PartitionedCall:0, shape: [ ? x 4 ] }

; [serving_default_x:0 <4294967295,3,4>] = 0x5568adf04be0
%0 = circle.CIRCLEINPUT()
; [arith.constant <2>] = 0x5568adf06270
%1 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [2], ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf064c0
%2 = circle.RESHAPE(tensor: %0, shape: %1, ...)
; [PartitionedCall:0 <4294967295,4>] = 0x5568adf06850
%3 = circle.CIRCLEOUTPUT(from: %2)

luci::PhaseRunner<Restart> - done
[luci] Tensor for serving_default_x:0: 0
[luci] Tensor for arith.constant: 1
[luci] Tensor for PartitionedCall:0: 2
