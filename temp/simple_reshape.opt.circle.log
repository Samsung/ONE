/usr/local/bin/circle2circle simple_reshape.circle simple_reshape.opt.circle --verbose
[luci] NodeFinder INPUT(0) = 0x55c14bb5d980
[luci] NodeFinder const_node(1) -> 0x55c14bb5f060 10, 784
[luci] NodeFinder const_node(2) -> 0x55c14bb66d30 1
[luci] NodeFinder const_node(3) -> 0x55c14bb66ec0 1
[luci] NodeFinder const_node(4) -> 0x55c14bb67060 
[luci] NodeFinder OUTPUT(10) = 0x55c14bb68ad0
--- graph dump begin -------------------------------------------
Name: main
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <4294967295,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <4294967295,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--- graph dump end ---------------------------------------------
--- FixInterGraph main-------------------------
--- ValidateGraphProp main---------------------
--- post_import_graph done -------------------------------------
==============================================================
ModulePhaseRunner<Restart>
Initial graphs
graphs #0
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <4294967295,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <4294967295,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_keras_tensor:0
  before: [?,28,28]
[luci] shape: serving_default_keras_tensor:0
              own_shape: [1,28,28] -> infer: [?,28,28]
 after: [?,28,28]
[CircleShapeInference] sequential_1/reshape_1/Shape
  before: [3]
[luci] shape: sequential_1/reshape_1/Shape
              own_shape: [3] -> infer: [3]
 after: [3]
[CircleShapeInference] arith.constant2
  before: [1]
[luci] shape: arith.constant2
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] arith.constant1
  before: [1]
[luci] shape: arith.constant1
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] sequential_1/reshape_1/strided_slice
  before: []
[luci] shape: sequential_1/reshape_1/strided_slice
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] arith.constant3
  before: []
[luci] shape: arith.constant3
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/reshape_1/Reshape/shape
  before: [2]
[luci] shape: sequential_1/reshape_1/Reshape/shape
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] sequential_1/reshape_1/Reshape
  before: [?,784]
MYLOG: infer_reshape node:0x55c14bb67de0
MYLOG: node->shape(): 0x55c14bb67a20
MYLOG: const_shape_node: 0
MYLOG: const_shape_node IS null
MYLOG: shape_by_attr.rank(): 0
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [1,784]
   shape_by_attr : []
[luci] shape: sequential_1/reshape_1/Reshape
              own_shape: [1,784] -> infer: [1,784]
 after: [1,784]
[CircleShapeInference] arith.constant
  before: [10,784]
[luci] shape: arith.constant
              own_shape: [10,784] -> infer: [10,784]
 after: [10,784]
[CircleShapeInference] 
  before: []
[luci] shape: 
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: [?,10]
[luci] shape: sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [?,10]
 after: [?,10]
After luci::CircleShapeInferencePass (changed: Y)
graphs #0
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_keras_tensor:0
  before: [?,28,28]
[luci] shape: serving_default_keras_tensor:0
              own_shape: [1,28,28] -> infer: [?,28,28]
 after: [?,28,28]
[CircleShapeInference] sequential_1/reshape_1/Shape
  before: [3]
[luci] shape: sequential_1/reshape_1/Shape
              own_shape: [3] -> infer: [3]
 after: [3]
[CircleShapeInference] arith.constant2
  before: [1]
[luci] shape: arith.constant2
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] arith.constant1
  before: [1]
[luci] shape: arith.constant1
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] sequential_1/reshape_1/strided_slice
  before: []
[luci] shape: sequential_1/reshape_1/strided_slice
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] arith.constant3
  before: []
[luci] shape: arith.constant3
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/reshape_1/Reshape/shape
  before: [2]
[luci] shape: sequential_1/reshape_1/Reshape/shape
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] sequential_1/reshape_1/Reshape
  before: [1,784]
MYLOG: infer_reshape node:0x55c14bb67de0
MYLOG: node->shape(): 0x55c14bb67a20
MYLOG: const_shape_node: 0
MYLOG: const_shape_node IS null
MYLOG: shape_by_attr.rank(): 0
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [1,784]
   shape_by_attr : []
[luci] shape: sequential_1/reshape_1/Reshape
              own_shape: [1,784] -> infer: [1,784]
 after: [1,784]
[CircleShapeInference] arith.constant
  before: [10,784]
[luci] shape: arith.constant
              own_shape: [10,784] -> infer: [10,784]
 after: [10,784]
[CircleShapeInference] 
  before: []
[luci] shape: 
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: [1,10]
[luci] shape: sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [1,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [?,10]
 after: [?,10]
After luci::CircleShapeInferencePass (changed: N)
graphs #0
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_keras_tensor:0
  before: 12
   after: 12
[CircleTypeInference] sequential_1/reshape_1/Shape
  before: 9
   after: 9
[CircleTypeInference] arith.constant2
  before: 9
   after: 9
[CircleTypeInference] arith.constant1
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/strided_slice
  before: 9
   after: 9
[CircleTypeInference] arith.constant3
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape/shape
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 12
   after: 12
[CircleTypeInference] 
  before: 0
   after: 12
[CircleTypeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: Y)
graphs #0
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_keras_tensor:0
  before: [?,28,28]
[luci] shape: serving_default_keras_tensor:0
              own_shape: [1,28,28] -> infer: [?,28,28]
 after: [?,28,28]
[CircleShapeInference] sequential_1/reshape_1/Shape
  before: [3]
[luci] shape: sequential_1/reshape_1/Shape
              own_shape: [3] -> infer: [3]
 after: [3]
[CircleShapeInference] arith.constant2
  before: [1]
[luci] shape: arith.constant2
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] arith.constant1
  before: [1]
[luci] shape: arith.constant1
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] sequential_1/reshape_1/strided_slice
  before: []
[luci] shape: sequential_1/reshape_1/strided_slice
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] arith.constant3
  before: []
[luci] shape: arith.constant3
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/reshape_1/Reshape/shape
  before: [2]
[luci] shape: sequential_1/reshape_1/Reshape/shape
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] sequential_1/reshape_1/Reshape
  before: [1,784]
MYLOG: infer_reshape node:0x55c14bb67de0
MYLOG: node->shape(): 0x55c14bb67a20
MYLOG: const_shape_node: 0
MYLOG: const_shape_node IS null
MYLOG: shape_by_attr.rank(): 0
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [1,784]
   shape_by_attr : []
[luci] shape: sequential_1/reshape_1/Reshape
              own_shape: [1,784] -> infer: [1,784]
 after: [1,784]
[CircleShapeInference] arith.constant
  before: [10,784]
[luci] shape: arith.constant
              own_shape: [10,784] -> infer: [10,784]
 after: [10,784]
[CircleShapeInference] 
  before: []
[luci] shape: 
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: [1,10]
[luci] shape: sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [1,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [?,10]
 after: [?,10]
After luci::CircleShapeInferencePass (changed: N)
graphs #0
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_keras_tensor:0
  before: 12
   after: 12
[CircleTypeInference] sequential_1/reshape_1/Shape
  before: 9
   after: 9
[CircleTypeInference] arith.constant2
  before: 9
   after: 9
[CircleTypeInference] arith.constant1
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/strided_slice
  before: 9
   after: 9
[CircleTypeInference] arith.constant3
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape/shape
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 12
   after: 12
[CircleTypeInference] 
  before: 12
   after: 12
[CircleTypeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
graphs #0
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

ModulePhaseRunner<Restart> - done
==============================================================
luci::PhaseRunner<Restart>
Initial graph
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_keras_tensor:0
  before: [?,28,28]
[luci] shape: serving_default_keras_tensor:0
              own_shape: [1,28,28] -> infer: [?,28,28]
 after: [?,28,28]
[CircleShapeInference] sequential_1/reshape_1/Shape
  before: [3]
[luci] shape: sequential_1/reshape_1/Shape
              own_shape: [3] -> infer: [3]
 after: [3]
[CircleShapeInference] arith.constant2
  before: [1]
[luci] shape: arith.constant2
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] arith.constant1
  before: [1]
[luci] shape: arith.constant1
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] sequential_1/reshape_1/strided_slice
  before: []
[luci] shape: sequential_1/reshape_1/strided_slice
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] arith.constant3
  before: []
[luci] shape: arith.constant3
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/reshape_1/Reshape/shape
  before: [2]
[luci] shape: sequential_1/reshape_1/Reshape/shape
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] sequential_1/reshape_1/Reshape
  before: [1,784]
MYLOG: infer_reshape node:0x55c14bb67de0
MYLOG: node->shape(): 0x55c14bb67a20
MYLOG: const_shape_node: 0
MYLOG: const_shape_node IS null
MYLOG: shape_by_attr.rank(): 0
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [1,784]
   shape_by_attr : []
[luci] shape: sequential_1/reshape_1/Reshape
              own_shape: [1,784] -> infer: [1,784]
 after: [1,784]
[CircleShapeInference] arith.constant
  before: [10,784]
[luci] shape: arith.constant
              own_shape: [10,784] -> infer: [10,784]
 after: [10,784]
[CircleShapeInference] 
  before: []
[luci] shape: 
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: [1,10]
[luci] shape: sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [1,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [?,10]
 after: [?,10]
After luci::CircleShapeInferencePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_keras_tensor:0
  before: 12
   after: 12
[CircleTypeInference] sequential_1/reshape_1/Shape
  before: 9
   after: 9
[CircleTypeInference] arith.constant2
  before: 9
   after: 9
[CircleTypeInference] arith.constant1
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/strided_slice
  before: 9
   after: 9
[CircleTypeInference] arith.constant3
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape/shape
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 12
   after: 12
[CircleTypeInference] 
  before: 12
   after: 12
[CircleTypeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CanonicalizePass
After luci::CanonicalizePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before RemoveDeadNodeWithQueryPass
After RemoveDeadNodeWithQueryPass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

luci::PhaseRunner<Restart> - done
==============================================================
luci::PhaseRunner<Restart>
Initial graph
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before RemoveDeadNodeWithQueryPass
After RemoveDeadNodeWithQueryPass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_keras_tensor:0
  before: [?,28,28]
[luci] shape: serving_default_keras_tensor:0
              own_shape: [1,28,28] -> infer: [?,28,28]
 after: [?,28,28]
[CircleShapeInference] sequential_1/reshape_1/Shape
  before: [3]
[luci] shape: sequential_1/reshape_1/Shape
              own_shape: [3] -> infer: [3]
 after: [3]
[CircleShapeInference] arith.constant2
  before: [1]
[luci] shape: arith.constant2
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] arith.constant1
  before: [1]
[luci] shape: arith.constant1
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] sequential_1/reshape_1/strided_slice
  before: []
[luci] shape: sequential_1/reshape_1/strided_slice
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] arith.constant3
  before: []
[luci] shape: arith.constant3
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/reshape_1/Reshape/shape
  before: [2]
[luci] shape: sequential_1/reshape_1/Reshape/shape
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] sequential_1/reshape_1/Reshape
  before: [1,784]
MYLOG: infer_reshape node:0x55c14bb67de0
MYLOG: node->shape(): 0x55c14bb67a20
MYLOG: const_shape_node: 0
MYLOG: const_shape_node IS null
MYLOG: shape_by_attr.rank(): 0
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [1,784]
   shape_by_attr : []
[luci] shape: sequential_1/reshape_1/Reshape
              own_shape: [1,784] -> infer: [1,784]
 after: [1,784]
[CircleShapeInference] arith.constant
  before: [10,784]
[luci] shape: arith.constant
              own_shape: [10,784] -> infer: [10,784]
 after: [10,784]
[CircleShapeInference] 
  before: []
[luci] shape: 
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: [1,10]
[luci] shape: sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [1,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [?,10]
 after: [?,10]
After luci::CircleShapeInferencePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_keras_tensor:0
  before: 12
   after: 12
[CircleTypeInference] sequential_1/reshape_1/Shape
  before: 9
   after: 9
[CircleTypeInference] arith.constant2
  before: 9
   after: 9
[CircleTypeInference] arith.constant1
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/strided_slice
  before: 9
   after: 9
[CircleTypeInference] arith.constant3
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape/shape
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 12
   after: 12
[CircleTypeInference] 
  before: 12
   after: 12
[CircleTypeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::XpSepActFromTransposeConvPass
After luci::XpSepActFromTransposeConvPass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

luci::PhaseRunner<Restart> - done
Unknown dimension is matched with known dimension
==============================================================
luci::PhaseRunner<Restart>
Initial graph
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleShapeInferencePass
[CircleShapeInference] serving_default_keras_tensor:0
  before: [?,28,28]
[luci] shape: serving_default_keras_tensor:0
              own_shape: [1,28,28] -> infer: [?,28,28]
 after: [?,28,28]
[CircleShapeInference] sequential_1/reshape_1/Shape
  before: [3]
[luci] shape: sequential_1/reshape_1/Shape
              own_shape: [3] -> infer: [3]
 after: [3]
[CircleShapeInference] arith.constant2
  before: [1]
[luci] shape: arith.constant2
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] arith.constant1
  before: [1]
[luci] shape: arith.constant1
              own_shape: [1] -> infer: [1]
 after: [1]
[CircleShapeInference] sequential_1/reshape_1/strided_slice
  before: []
[luci] shape: sequential_1/reshape_1/strided_slice
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] arith.constant3
  before: []
[luci] shape: arith.constant3
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/reshape_1/Reshape/shape
  before: [2]
[luci] shape: sequential_1/reshape_1/Reshape/shape
              own_shape: [2] -> infer: [2]
 after: [2]
[CircleShapeInference] sequential_1/reshape_1/Reshape
  before: [1,784]
MYLOG: infer_reshape node:0x55c14bb67de0
MYLOG: node->shape(): 0x55c14bb67a20
MYLOG: const_shape_node: 0
MYLOG: const_shape_node IS null
MYLOG: shape_by_attr.rank(): 0
CircleReshape: Two new shape information mismatched : 
   shape_by_input : [1,784]
   shape_by_attr : []
[luci] shape: sequential_1/reshape_1/Reshape
              own_shape: [1,784] -> infer: [1,784]
 after: [1,784]
[CircleShapeInference] arith.constant
  before: [10,784]
[luci] shape: arith.constant
              own_shape: [10,784] -> infer: [10,784]
 after: [10,784]
[CircleShapeInference] 
  before: []
[luci] shape: 
              own_shape: [] -> infer: []
 after: []
[CircleShapeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: [1,10]
[luci] shape: sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [1,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [1,10]
 after: [1,10]
[CircleShapeInference] StatefulPartitionedCall_1:0
  before: [?,10]
[luci] shape: StatefulPartitionedCall_1:0
              own_shape: [1,10] -> infer: [?,10]
 after: [?,10]
After luci::CircleShapeInferencePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

--------------------------------------------------------------
Before luci::CircleTypeInferencePass
[CircleTypeInference] serving_default_keras_tensor:0
  before: 12
   after: 12
[CircleTypeInference] sequential_1/reshape_1/Shape
  before: 9
   after: 9
[CircleTypeInference] arith.constant2
  before: 9
   after: 9
[CircleTypeInference] arith.constant1
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/strided_slice
  before: 9
   after: 9
[CircleTypeInference] arith.constant3
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape/shape
  before: 9
   after: 9
[CircleTypeInference] sequential_1/reshape_1/Reshape
  before: 12
   after: 12
[CircleTypeInference] arith.constant
  before: 12
   after: 12
[CircleTypeInference] 
  before: 12
   after: 12
[CircleTypeInference] sequential_1/dense_1/MatMul;sequential_1/dense_1/Add
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
[CircleTypeInference] StatefulPartitionedCall_1:0
  before: 12
   after: 12
After luci::CircleTypeInferencePass (changed: N)
In #0 { name: serving_default_keras_tensor:0, shape: [ ? x 28 x 28 ] }
Out #0 { name: StatefulPartitionedCall_1:0, shape: [ ? x 10 ] }

; [serving_default_keras_tensor:0 <4294967295,28,28>] = 0x55c14bb5d980
%0 = circle.CIRCLEINPUT()
; [sequential_1/reshape_1/Shape <3>] = 0x55c14bb67240
%5 = circle.SHAPE(input: %0, out_type: INT32)
; [arith.constant2 <1>] = 0x55c14bb66ec0
%3 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [arith.constant1 <1>] = 0x55c14bb66d30
%2 = circle.CIRCLECONST(dtype: INT32, rank: 1, shape: [1], ...)
; [sequential_1/reshape_1/strided_slice <>] = 0x55c14bb675a0
%6 = circle.STRIDED_SLICE(input: %5, begin: %3, end: %2, strides: %2, begin_mask: 0, end_mask: 0, ellipsis_mask: 0, new_axis_mask: 0, shrink_axis_mask: 1)
; [arith.constant3 <>] = 0x55c14bb67060
%4 = circle.CIRCLECONST(dtype: INT32, rank: 0, shape: [], ...)
; [sequential_1/reshape_1/Reshape/shape <2>] = 0x55c14bb67a20
%7 = circle.PACK(values: %6, values: %4, values_count: 2, axis: 0)
; [sequential_1/reshape_1/Reshape <1,784>] = 0x55c14bb67de0
%8 = circle.RESHAPE(tensor: %0, shape: %7, ...)
; [arith.constant <10,784>] = 0x55c14bb5f060
%1 = circle.CIRCLECONST(dtype: FLOAT32, rank: 2, shape: [10 784], ...)
; [ <>] = 0x55c14bb68230
%9 = circle.CIRCLEOUTPUTEXCLUDE()
; [sequential_1/dense_1/MatMul;sequential_1/dense_1/Add <1,10>] = 0x55c14bb68320
%10 = circle.FULLY_CONNECTED(input: %8, weights: %1, bias: %9, fused_activation_function: NONE)
; [StatefulPartitionedCall_1:0 <1,10>] = 0x55c14bb68770
%11 = circle.SOFTMAX(logits: %10, beta: 1.000000)
; [StatefulPartitionedCall_1:0 <4294967295,10>] = 0x55c14bb68ad0
%12 = circle.CIRCLEOUTPUT(from: %11)

luci::PhaseRunner<Restart> - done
[luci] Tensor for serving_default_keras_tensor:0: 0
[luci] Tensor for sequential_1/reshape_1/Shape: 1
[luci] Tensor for arith.constant2: 2
[luci] Tensor for arith.constant1: 3
[luci] Tensor for sequential_1/reshape_1/strided_slice: 4
[luci] Tensor for arith.constant3: 5
[luci] Tensor for sequential_1/reshape_1/Reshape/shape: 6
[luci] Tensor for sequential_1/reshape_1/Reshape: 7
[luci] Tensor for arith.constant: 8
[luci] Tensor for sequential_1/dense_1/MatMul;sequential_1/dense_1/Add: 9
[luci] Tensor for StatefulPartitionedCall_1:0: 10
