name: Run Circle-MLIR Ubuntu Build

on:
  push:
    branches:
      - master
      - release/*
    paths:
      - '.github/workflows/run-circle-mlir-build.yml'
      - 'circle-mlir/**'
  pull_request:
    branches:
      - master
      - release/*
    paths:
      - '.github/workflows/run-circle-mlir-build.yml'
      - 'circle-mlir/**'

defaults:
  run:
    shell: bash

# Cancel previous running jobs when pull request is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  circle-mlir-test:
    if: github.repository_owner == 'Samsung'
    strategy:
      matrix:
        type: [ Debug, Release ]
        ubuntu_code: [ focal, jammy ]
        include:
          - ubuntu_code: focal
            ubuntu_vstr: u2004
          - ubuntu_code: jammy
            ubuntu_vstr: u2204

    runs-on: ubuntu-latest

    container:
      image: nnfw/circle-mlir-build-${{ matrix.ubuntu_vstr }}:latest
      options: --user root

    name: circle-mlir ${{ matrix.ubuntu_vstr }} ${{ matrix.type }} test

    steps:
      # NOTE we only need small circle-interpreter Debian package, but
      #      as it's not ready yet, install circle-interpreter from build.
      # TODO prepare circle-interpreter Debian package and install it.
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare circle-interpreter from source
        env:
          NNCC_WORKSPACE: build
        run: |
          CIRINT_ITEMS="angkor;cwrap;pepper-str;pepper-strcast;pepper-csv2vec;pp"
          CIRINT_ITEMS="${CIRINT_ITEMS};oops;loco;logo-core;logo;locop"
          CIRINT_ITEMS="${CIRINT_ITEMS};hermes;hermes-std;safemain;mio-circle08"
          CIRINT_ITEMS="${CIRINT_ITEMS};luci-compute;luci;luci-interpreter"
          CIRINT_ITEMS="${CIRINT_ITEMS};foder;arser;vconone;circle-interpreter"
          echo ${CIRINT_ITEMS}

          ./nncc configure \
            -DENABLE_STRICT_BUILD=ON \
            -DENABLE_TEST=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DEXTERNALS_BUILD_THREADS=4 \
            -DCMAKE_INSTALL_PREFIX=install \
            -DBUILD_WHITELIST="${CIRINT_ITEMS}"
          ./nncc build -j4
          cmake --build ${NNCC_WORKSPACE} -- install

      # NOTE Docker image has pre-installed submodules in /workdir
      # NOTE Docker image has pre-installed python packages
      - name: Configure
        run: |
          cd circle-mlir
          Python3_ROOT_DIR=/usr/bin cmake -B build/${{ matrix.type }} -S ./ \
          -DCMAKE_INSTALL_PREFIX=build/${{ matrix.type }}.install \
          -DCMAKE_BUILD_TYPE=${{ matrix.type }} \
          -DCIRCLE_MLIR_WORKDIR=/workdir

      - name: Build, test & install
        env:
          ONE_COMPILER_ROOT: ${{ github.workspace }}/build/install
        run: |
          cd circle-mlir
          cmake --build build/${{ matrix.type }} -j4
          CTEST_OUTPUT_ON_FAILURE=1 cmake --build build/${{ matrix.type }} --verbose -- test
          cmake --build build/${{ matrix.type }} -j4 -- install
