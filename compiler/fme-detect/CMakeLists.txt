nnas_find_package(Jsoncpp)
if(NOT Jsoncpp_FOUND)
  message(STATUS "Build jsoncpp: FAILED (missing jsoncpp)")
  return()
endif(NOT Jsoncpp_FOUND)

set(DRIVER "driver/Driver.cpp")

file(GLOB_RECURSE SOURCES "src/*.cpp")
file(GLOB_RECURSE TESTS "src/*.test.cpp")
list(REMOVE_ITEM SOURCES ${TESTS})

add_executable(fme-detect ${DRIVER} ${SOURCES})
target_include_directories(fme-detect PRIVATE ${Jsoncpp_INCLUDE_DIRS})
target_include_directories(fme-detect PRIVATE src)

target_link_libraries(fme-detect ${Jsoncpp_STATIC_LIB})
target_link_libraries(fme-detect safemain)
target_link_libraries(fme-detect foder)
target_link_libraries(fme-detect loco)
target_link_libraries(fme-detect logo)
target_link_libraries(fme-detect logo_core)
target_link_libraries(fme-detect luci_lang)
target_link_libraries(fme-detect luci_import)
target_link_libraries(fme-detect luci_service)
target_link_libraries(fme-detect luci_log)
target_link_libraries(fme-detect luci_logex)
target_link_libraries(fme-detect luci_pass)
target_link_libraries(fme-detect luci_export)
target_link_libraries(fme-detect luci_env)
target_link_libraries(fme-detect luci_profile)
target_link_libraries(fme-detect arser)

install(TARGETS fme-detect DESTINATION bin)

if(NOT ENABLE_TEST)
  return()
endif(NOT ENABLE_TEST)

nnas_find_package(GTest REQUIRED)
GTest_AddTest(fme_detect_test ${TESTS} ${SOURCES})
target_include_directories(fme_detect_test PRIVATE ${Jsoncpp_INCLUDE_DIRS})
target_include_directories(fme_detect_test PRIVATE src)
target_link_libraries(fme_detect_test ${Jsoncpp_STATIC_LIB})
target_link_libraries(fme_detect_test luci_testhelper)
target_link_libraries(fme_detect_test loco)
target_link_libraries(fme_detect_test logo)
target_link_libraries(fme_detect_test logo_core)
target_link_libraries(fme_detect_test luci_lang)
target_link_libraries(fme_detect_test luci_pass)
target_link_libraries(fme_detect_test luci_service)
target_link_libraries(fme_detect_test luci_log)
target_link_libraries(fme_detect_test luci_logex)
target_link_libraries(fme_detect_test luci_profile)
