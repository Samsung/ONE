#file(GLOB_RECURSE SOURCES "src/*.cpp")
file(GLOB SOURCES "src/*.cpp")
#list(APPEND SOURCES src/Nodes/CircleAbs.cpp)
#list(APPEND SOURCES src/Nodes/CircleAdd.cpp)
#list(APPEND SOURCES src/Nodes/CircleArgMax.cpp)
list(APPEND SOURCES src/Nodes/CircleAveragePool2D.cpp)
#list(APPEND SOURCES src/Nodes/CircleBatchToSpaceND.cpp)
#list(APPEND SOURCES src/Nodes/CircleCast.cpp)

list(APPEND SOURCES src/Nodes/CircleConst.cpp)
list(APPEND SOURCES src/Nodes/CircleFullyConnected.cpp)
list(APPEND SOURCES src/Nodes/CircleConcatenation.cpp)

list(APPEND SOURCES src/Nodes/CircleConv2D.cpp)
list(APPEND SOURCES src/Nodes/CircleSoftmax.cpp)
list(APPEND SOURCES src/Nodes/CircleDepthwiseConv2D.cpp)
list(APPEND SOURCES src/Nodes/CircleReshape.cpp)

#list(APPEND SOURCES src/Nodes/CircleCustom.cpp)
#list(APPEND SOURCES src/Nodes/CircleCos.cpp)
#list(APPEND SOURCES src/Nodes/CircleDiv.cpp)
#list(APPEND SOURCES src/Nodes/CircleEqual.cpp)
#list(APPEND SOURCES src/Nodes/CircleExp.cpp)
#list(APPEND SOURCES src/Nodes/CircleExpandDims.cpp)
#list(APPEND SOURCES src/Nodes/CircleFill.cpp)
#list(APPEND SOURCES src/Nodes/CircleFloorDiv.cpp)
#list(APPEND SOURCES src/Nodes/CircleFloorMod.cpp)
#list(APPEND SOURCES src/Nodes/CircleFullyConnected.cpp)
#list(APPEND SOURCES src/Nodes/CircleGather.cpp)
#list(APPEND SOURCES src/Nodes/CircleGatherNd.cpp)
#list(APPEND SOURCES src/Nodes/CircleGreater.cpp)
#list(APPEND SOURCES src/Nodes/CircleGreaterEqual.cpp)
#list(APPEND SOURCES src/Nodes/CircleIf.cpp)
#list(APPEND SOURCES src/Nodes/CircleLess.cpp)
#list(APPEND SOURCES src/Nodes/CircleLogicalAnd.cpp)
#list(APPEND SOURCES src/Nodes/CircleLogicalNot.cpp)
#list(APPEND SOURCES src/Nodes/CircleLogicalOr.cpp)
#list(APPEND SOURCES src/Nodes/CircleLogistic.cpp)
#list(APPEND SOURCES src/Nodes/CircleMaximum.cpp)
#list(APPEND SOURCES src/Nodes/CircleMaxPool2D.cpp)
#list(APPEND SOURCES src/Nodes/CircleMean.cpp)
#list(APPEND SOURCES src/Nodes/CircleMinimum.cpp)
#list(APPEND SOURCES src/Nodes/CircleMirrorPad.cpp)
#list(APPEND SOURCES src/Nodes/CircleMul.cpp)
#list(APPEND SOURCES src/Nodes/CircleNotEqual.cpp)
#list(APPEND SOURCES src/Nodes/CircleOneHot.cpp)
#list(APPEND SOURCES src/Nodes/CirclePack.cpp)
#list(APPEND SOURCES src/Nodes/CirclePad.cpp)
#list(APPEND SOURCES src/Nodes/CirclePow.cpp)
#list(APPEND SOURCES src/Nodes/CircleRange.cpp)
#list(APPEND SOURCES src/Nodes/CircleReduceAny.cpp)
#list(APPEND SOURCES src/Nodes/CircleReduceProd.cpp)
#list(APPEND SOURCES src/Nodes/CircleRelu.cpp)
#list(APPEND SOURCES src/Nodes/CircleReluN1To1.cpp)
#list(APPEND SOURCES src/Nodes/CircleRsqrt.cpp)
#list(APPEND SOURCES src/Nodes/CircleSelect.cpp)
#list(APPEND SOURCES src/Nodes/CircleShape.cpp)
#list(APPEND SOURCES src/Nodes/CircleSin.cpp)
#list(APPEND SOURCES src/Nodes/CircleSlice.cpp)
#list(APPEND SOURCES src/Nodes/CircleSpaceToBatchND.cpp)
#list(APPEND SOURCES src/Nodes/CircleSplit.cpp)
#list(APPEND SOURCES src/Nodes/CircleSplitV.cpp)
#list(APPEND SOURCES src/Nodes/CircleSquare.cpp)
#list(APPEND SOURCES src/Nodes/CircleSquaredDifference.cpp)
#list(APPEND SOURCES src/Nodes/CircleSqueeze.cpp)
#list(APPEND SOURCES src/Nodes/CircleStridedSlice.cpp)
#list(APPEND SOURCES src/Nodes/CircleSub.cpp)
#list(APPEND SOURCES src/Nodes/CircleSum.cpp)
#list(APPEND SOURCES src/Nodes/CircleTanh.cpp)
#list(APPEND SOURCES src/Nodes/CircleTile.cpp)
#list(APPEND SOURCES src/Nodes/CircleTopKV2.cpp)
#list(APPEND SOURCES src/Nodes/CircleTranspose.cpp)
#list(APPEND SOURCES src/Nodes/CircleWhile.cpp)
#list(APPEND SOURCES src/Nodes/CircleUnpack.cpp)
#list(APPEND SOURCES src/Nodes/CircleZerosLike.cpp)

file(GLOB_RECURSE TESTS "src/*.test.cpp")
list(REMOVE_ITEM SOURCES ${TESTS})

if (NOT LIBRARY_TYPE)
  set(LIBRARY_TYPE "SHARED")
endif(NOT LIBRARY_TYPE)

add_library(luci_import ${LIBRARY_TYPE} ${SOURCES})
target_include_directories(luci_import PRIVATE src)
target_include_directories(luci_import PUBLIC include)
target_link_libraries(luci_import PUBLIC luci_lang)
target_link_libraries(luci_import PUBLIC luci_profile)
target_link_libraries(luci_import PUBLIC luci_plan)
target_link_libraries(luci_import PUBLIC mio_circle)
target_link_libraries(luci_import PRIVATE luci_env)
target_link_libraries(luci_import PRIVATE luci_log)
target_link_libraries(luci_import PRIVATE luci_logex)
target_link_libraries(luci_import PRIVATE nncc_common)
target_link_libraries(luci_import PRIVATE locop)
target_link_libraries(luci_import PRIVATE oops)
install(TARGETS luci_import DESTINATION lib)
install(DIRECTORY include/ DESTINATION include
        FILES_MATCHING PATTERN "*.h")

if(NOT ENABLE_TEST)
  return()
endif(NOT ENABLE_TEST)

nnas_find_package(GTest REQUIRED)

GTest_AddTest(luci_import_test ${TESTS})
target_include_directories(luci_import_test PRIVATE src)
target_link_libraries(luci_import_test luci_import)
target_link_libraries(luci_import_test oops)
