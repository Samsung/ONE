#!/usr/bin/env python3

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
# Copyright 2017 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import tensorflow as tf

import argparse
import sys


def _get_parser():
    """
    Returns an ArgumentParser for generating output_arrays.
    """
    parser = argparse.ArgumentParser(
        description=("Command line tool to generated output_arrays of BCQ nodes"))

    # Input and output path.
    parser.add_argument(
        "-i",
        "--input_path",
        type=str,
        help="Full filepath of the input file.",
        required=True)
    parser.add_argument(
        "-o",
        "--output_path",
        type=str,
        help="Full filepath of the output file.",
        required=True)

    return parser


# This function is copied from
# https://github.com/tensorflow/tensorflow/blob/r2.3/tensorflow/examples/label_image/label_image.py#L26
def load_graph(model_file):
    graph = tf.Graph()
    graph_def = tf.compat.v1.GraphDef()

    with open(model_file, "rb") as f:
        graph_def.ParseFromString(f.read())
    with graph.as_default():
        tf.import_graph_def(graph_def, name="")

    return graph


def print_output_arrays(flags):
    graph_model = load_graph(flags.input_path)
    graph_model_def = graph_model.as_graph_def()
    ops = graph_model.get_operations()

    output_names = [op.outputs[0].name for op in ops 
        if op.type == "Const" and "bcqinfo_" in op.outputs[0].name]

    output_arrays = ""    
    for output_name in output_names:
        output_arrays += ","

        colon_index = output_name.find(":")
        if colon_index == -1:
            output_arrays += output_name
        else:
            output_arrays += output_name[:colon_index]

    f = open(flags.output_path, 'w')
    f.write(output_arrays)
    f.close()


def find_bcq_version(flags):
    pass


def print_bcqinfo_output_arrays_v1(flags):
    pass


def print_bcq_output_arrays(flags):
    version = find_bcq_version(flags)
    
    if version == 1:
        print_bcqinfo_output_arrays_v1(flags)
    else:
        pass


def main():
    # Parse argument.
    parser = _get_parser()
    flags = parser.parse_known_args(args=sys.argv[1:])

    print_output_arrays(flags[0])


if __name__ == "__main__":
    main()
