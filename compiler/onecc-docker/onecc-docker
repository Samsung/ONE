#!/usr/bin/env python3

# Copyright (c) 2022 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import subprocess
import json
import requests
import os
import argparse
import copy
import itertools


def _run(cmd, is_shell=False):
    result = subprocess.Popen(
        cmd, shell=is_shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    stdout, stderr = result.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')

    if result.returncode:
        print(stderr, end='')
        exit(result.returncode)
    else:
        return stdout


def _image_exists(name):
    cmd = ['docker', 'images', '-q', name]
    lines = _run(cmd).splitlines()
    return lines


def main():
    # TODO Update Dockerfile path
    dockerfile_path = "./docker"

    onecc_docker_usage = 'onecc-docker [-h] [-t TOKEN] [--] [COMMANDS FOR ONECC]'
    onecc_docker_desc = 'Run onecc via docker'
    parser = argparse.ArgumentParser(
        usage=onecc_docker_usage, description=onecc_docker_desc)
    parser.add_argument(
        "-t",
        "--token",
        help=
        "Token for authentication to GitHub. This is a workaround for Rate limit exceeded error"
    )

    onecc_docker_args = []
    onecc_args = []
    argv = copy.deepcopy(sys.argv)
    # delete file name
    del argv[0]
    # split by '--'
    args = [list(y) for x, y in itertools.groupby(argv, lambda z: z == '--')]
    # onecc-docker has two interfaces
    # 1. onecc-docker [-h] [-t TOKEN] [COMMANDS FOR ONECC]
    if len(args) < 2:
        onecc_docker_args = args[0] if len(args) == 1 else ['-h']
        onecc_docker_args, onecc_args = parser.parse_known_args(onecc_docker_args)
    # 2. onecc-docker [-h] [-t TOKEN] -- [COMMANDS FOR ONECC]
    else:
        onecc_docker_args = onecc_docker_args if len(args) == 2 else args[0]
        onecc_args = args[1] if len(args) == 2 else args[2]
        onecc_docker_args = parser.parse_args(onecc_docker_args)

    authorization_token = onecc_docker_args.token
    LATEST_URL = "https://api.github.com/repos/Samsung/ONE/releases/latest"
    try:
        headers = {}
        if authorization_token:
            headers = {"Authorization": "Bearer {}".format(authorization_token)}
        response = requests.get(LATEST_URL, headers=headers)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        raise SystemExit('onecc-docker: error: {}'.format(e))

    versions_str = response.content
    versions_json = json.loads(versions_str)
    recent_version = versions_json["tag_name"]

    image_name = f"onecc:{recent_version}"
    build_arg = f"VERSION={recent_version}"

    if not _image_exists(image_name):
        build_cmd = [
            "docker", "build", "-t", image_name, "--build-arg", build_arg, dockerfile_path
        ]
        print('build Docker image ...')
        _run(build_cmd)
        print('Dockerfile successfully built.')

    contianer_name = f"onecc_{recent_version.replace('.','_')}"
    user_cmd = ' '.join(onecc_args)

    run_cmd = [
        "docker", "run", "--rm", "-u", "$(id -u):$(id -g)", "--name", contianer_name,
        "-v", "${HOME}:${HOME}", "-e", "HOME=${HOME}", "-w", "${PWD}", image_name,
        user_cmd
    ]

    cmd = ' '.join(run_cmd)
    output = _run(cmd, is_shell=True)
    print(output, end='')


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        prog_name = os.path.basename(__file__)
        print(f"{prog_name}: {type(e).__name__}: " + str(e), file=sys.stderr)
        sys.exit(255)
