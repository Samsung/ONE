#!/usr/bin/env python3

# Copyright (c) 2022 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import subprocess
import requests
import os
import argparse
import re


class RequestHandler:
    def __init__(self, token=None, timeout=None):
        if token:
            self.headers = {"Authorization": "Bearer {}".format(token)}
        else:
            self.headers = {}
        self.timeout = timeout or 5

    def make_request(self, url):
        try:
            response = requests.get(url, headers=self.headers, timeout=self.timeout)
            response.raise_for_status()
            return response
        except requests.RequestException as e:
            raise SystemExit('[onecc-docker] error: {}'.format(e))


# 5 sec timeout is set based on github.com/Samsung/ONE/issues/11134
def _request_recent_version(token=None):
    response = RequestHandler(
        token,
        timeout=5).make_request(url="https://api.github.com/repos/Samsung/ONE/releases")

    for release_item in response.json():
        # Return the latest version containing one-compiler-focal_{version}_amd64.deb in assets
        version = release_item["tag_name"]
        for asset in release_item["assets"]:
            if bool(re.match(r'one-compiler-focal_\d+\.\d+\.\d_amd64.deb',
                             asset["name"])):
                return version

    raise SystemExit('[onecc-docker] Failed to get latest onecc version')


# 10 sec timeout is set based on github.com/Samsung/ONE/issues/11134
def _run(cmd, is_shell=False, timeout=10):
    result = subprocess.Popen(cmd,
                              shell=is_shell,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)

    stdout, stderr = result.communicate(timeout=timeout)
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')

    if result.returncode:
        print(stderr, end='')
        exit(result.returncode)
    else:
        return stdout


def _image_exists(name):
    cmd = ['docker', 'images', '-q', name]
    lines = _run(cmd).splitlines()
    return lines


def main():
    script_path = os.path.dirname(os.path.realpath(__file__))
    dockerfile_path = os.path.join(script_path, 'docker')

    onecc_docker_usage = 'onecc-docker [-h] [-t TOKEN] [COMMAND <args>]'
    onecc_docker_desc = 'Run onecc via docker'
    parser = argparse.ArgumentParser(usage=onecc_docker_usage,
                                     description=onecc_docker_desc)
    parser.add_argument(
        "-t",
        "--token",
        help=
        "Token for authentication to GitHub. This is a workaround for Rate limit exceeded error"
    )

    args, onecc_arguments = parser.parse_known_args()
    authorization_token = args.token

    recent_version = _request_recent_version(authorization_token)
    image_name = f"onecc:{recent_version}"
    build_arg = f"VERSION={recent_version}"

    if not _image_exists(image_name):
        build_cmd = [
            "docker", "build", "-t", image_name, "--build-arg", build_arg, dockerfile_path
        ]
        print('[onecc-docker] Build docker image ...')
        _run(build_cmd, timeout=30)
        print('[onecc-docker] Docker image is built successfully.')

    contianer_name = f"onecc_{recent_version.replace('.','_')}"
    user_cmd = ' '.join(onecc_arguments)

    run_cmd = [
        "docker", "run", "--rm", "-u", "$(id -u):$(id -g)", "--name", contianer_name,
        "-v", "${HOME}:${HOME}", "-e", "HOME=${HOME}", "-w", "${PWD}", image_name,
        user_cmd
    ]

    cmd = ' '.join(run_cmd)
    output = _run(cmd, is_shell=True)
    print(output, end='')


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        prog_name = os.path.basename(__file__)
        print(f"{prog_name}: {type(e).__name__}: " + str(e), file=sys.stderr)
        sys.exit(255)
