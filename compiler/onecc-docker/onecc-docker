#!/usr/bin/env python3

# Copyright (c) 2022 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import subprocess
import json
import requests
import argparse


def _run(cmd, is_shell=False):
    result = subprocess.Popen(
        cmd, shell=is_shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    stdout, stderr = result.communicate()

    if stderr:
        print(stderr.decode('utf-8'), end='')
        exit(1)
    else:
        return stdout


def _image_exists(name):
    cmd = ['docker', 'images', '-q', name]
    lines = _run(cmd).splitlines()
    return lines


def main():
    Dockerfile_path = "/usr/share/one/docker/"

    onecc_docker_usage = 'onecc-docker [-h] [-t TOKEN] [COMMAND <args>]'
    onecc_docker_desc = 'Run onecc via docker'
    parser = argparse.ArgumentParser(
        usage=onecc_docker_usage, description=onecc_docker_desc)
    parser.add_argument(
        "-t", "--token", help="use GitHub authorization token to get onecc version")
    args, onecc_arguments = parser.parse_known_args()
    authorization_token = args.token

    TAG_URL = "https://api.github.com/repos/Samsung/ONE/releases/latest"
    try:
        if authorization_token:
            headers = {"Authorization": "Bearer {}".format(authorization_token)}
            response = requests.get(TAG_URL, headers=headers)
        else:
            response = requests.get(TAG_URL)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        raise SystemExit('Error occured while getting onecc latest tag')

    versions_str = response.content
    versions_json = json.loads(versions_str)
    recent_version = versions_json["tag_name"]

    image_name = f"onecc:{recent_version}"
    build_arg = f"VERSION={recent_version}"

    if not _image_exists(image_name):
        build_cmd = [
            "docker", "build", "-t", image_name, "--build-arg", build_arg, Dockerfile_path
        ]
        print('build Docker image ...')
        _run(build_cmd)
        print('Dockerfile successfully built.')

    contianer_name = f"onecc_{recent_version.replace('.','_')}"
    user_cmd = ''.join(onecc_arguments)

    run_cmd = [
        "docker", "run", "--rm", "-u", "$(id -u):$(id -g)", "--name", contianer_name,
        "-v", "${HOME}:${HOME}", "-e", "HOME=${HOME}", "-w", "${PWD}", image_name,
        user_cmd
    ]
    cmd = ' '.join(run_cmd)
    output = _run(cmd, is_shell=True)
    print(output.decode('utf-8'), end='')


if __name__ == "__main__":
    main()
