; Global Target Configuration for ONE
; Install path (required by ONE):
;   /usr/share/one/target/{TARGET_NAME}.ini
;
; "Target" = an instance definition (core, memory sizes, clocks, etc.)
; "Backend" = the architecture family handled by a set of backend tools.
; Multiple TARGETs can share the same BACKEND.

;------------------------------------------------------------------------------
; TARGET & BACKEND
;------------------------------------------------------------------------------
TARGET={TARGET_NAME}
BACKEND={BACKEND_NAME}

;------------------------------------------------------------------------------
; ARCHITECTURE
;------------------------------------------------------------------------------
; High-level architecture codename of the backend family.
ARCHITECTURE={ARCH_FAMILY_NAME}   ; e.g., TRIV, XYZ, V1, etc.

;------------------------------------------------------------------------------
; MEMORY (examples; adjust to your SoC/accelerator)
;------------------------------------------------------------------------------
; Sizes can use suffixes like KiB, MiB, GiB where supported.
DLA_SPM_SIZE=16KiB
DSP_SPM_SIZE=16KiB
GLOBAL_BUFFER_SIZE=2MiB

;------------------------------------------------------------------------------
; FREQUENCY (Hz)
;------------------------------------------------------------------------------
; Use integer Hertz. Examples below represent 1.0 GHz.
DLA_FREQUENCY=1000000000
CP_FREQUENCY=1000000000

;------------------------------------------------------------------------------
; BANDWIDTH
;------------------------------------------------------------------------------
; Use explicit units like GB/s if your downstream tools expect strings.
INTERNAL_DMA_BW=3GB/s
EXTERNAL_DMA_BW=5GB/s

;------------------------------------------------------------------------------
; OPTIONAL FIELDS (uncomment/modify as needed)
;------------------------------------------------------------------------------
; NUM_CORES=2
; CACHE_LINE_SIZE=64
; ALIGNMENT_REQUIREMENT=16
; MAX_TENSOR_RANK=6
; SUPPORTED_DATATYPES=fp32,fp16,int8
; KERNEL_DRIVER_NAME={BACKEND_NAME}-compile
; PROFILE_DRIVER_NAME={BACKEND_NAME}-profile
