#!/usr/bin/env python3
# Copyright (c) 2025 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Sample backend codegen driver wrapper.

This mock executable:
- Parses a subset of options expected from the command schema.
- Prints a structured summary to stdout.
- Creates the output file (if --output is given) to emulate success.

In real deployments, replace with your actual compiler entrypoint.
"""
import argparse
import json
import os
import sys


def main():
    p = argparse.ArgumentParser(prog="{BACKEND_NAME}-compile")
    p.add_argument("--target", required=True, help="Target name propagated by onecc")
    p.add_argument("--verbose", action="store_true")
    p.add_argument("--output", dest="output_path", required=True)
    p.add_argument("input", help="Input .circle (optimized)")

    # Add any backend-specific flags you also exposed in codegen.py
    # p.add_argument("--opt-level", type=int, default=2)

    args = p.parse_args()

    summary = {
        "driver": "{BACKEND_NAME}-compile",
        "target": args.target,
        "verbose": bool(args.verbose),
        "input": os.path.abspath(args.input),
        "output": os.path.abspath(args.output_path),
    }
    print(json.dumps(summary, indent=2))

    # Emulate codegen by touching the output file
    os.makedirs(os.path.dirname(args.output_path) or ".", exist_ok=True)
    with open(args.output_path, "wb") as f:
        f.write(b"\x00")  # tiny placeholder

    return 0


if __name__ == "__main__":
    sys.exit(main())
