#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import copy
import glob
import itertools
import ntpath
import os
import sys
import shutil
from types import SimpleNamespace

import onelib.backends as backends
import onelib.utils as oneutils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0

COMMAND_KEYS = ['__command', 'command']
BACKEND_KEY = 'BACKEND'


def _get_backends_list():
    """
    [one hierarchy]
    one
    ├── backends
    ├── bin
    ├── doc
    ├── include
    ├── lib
    └── test

    The list where `one-profile` finds its backends
    - `bin` folder where `one-profile` exists
    - `backends` folder

    NOTE If there are backends of the same name in different places,
     the closer to the top in the list, the higher the priority.
    """
    dir_path = os.path.dirname(os.path.realpath(__file__))
    backend_set = set()

    # bin folder
    files = [f for f in glob.glob(dir_path + '/*-profile')]
    # backends folder
    files += [
        f for f in glob.glob(dir_path + '/../backends/**/*-profile', recursive=True)
    ]
    # TODO find backends in `$PATH`

    backends_list = []
    for cand in files:
        base = ntpath.basename(cand)
        if not base in backend_set and os.path.isfile(cand) and os.access(cand, os.X_OK):
            backend_set.add(base)
            backends_list.append(cand)

    return backends_list


def _get_parser(backends_list):
    profile_usage = 'one-profile [-h] [-v] [-C CONFIG] [-b BACKEND | -T TARGET] [--] [COMMANDS FOR BACKEND]'
    parser = argparse.ArgumentParser(
        description='command line tool for profiling backend model', usage=profile_usage)

    oneutils.add_default_arg(parser)

    # get backend list in the directory
    backends_name = [ntpath.basename(f) for f in backends_list]
    if not backends_name:
        backends_name_message = '(There is no available backend drivers)'
    else:
        backends_name_message = '(available backend drivers: ' + ', '.join(
            backends_name) + ')'
    backend_help_message = 'backend name to use ' + backends_name_message
    parser.add_argument('-b', '--backend', type=str, help=backend_help_message)
    parser.add_argument('-T',
                        '--target',
                        type=str,
                        help='run with specific target of the backend')

    return parser


def _verify_arg(parser, args, cfg_args, cfg_target_args, backend_args, unknown_args):
    """verify given arguments"""
    cmd_backend_exist = oneutils.is_valid_attr(args, 'backend')
    cmd_target_exist = oneutils.is_valid_attr(args, 'target')
    if cmd_backend_exist and cmd_target_exist:
        parser.error(
            '\'backend\' option and \'target\' option cannot be used simultaneously.')
    cfg_backend_exist = oneutils.is_valid_attr(cfg_args, 'backend')
    cfg_backends_exist = oneutils.is_valid_attr(cfg_args, 'backends')
    target_exist = cmd_target_exist or oneutils.is_valid_attr(cfg_target_args, 'target')

    # check if required arguments is given
    missing = []
    if not cmd_backend_exist and not cfg_backend_exist and not cfg_backends_exist:
        if target_exist:
            target_to_run = None
            if oneutils.is_valid_attr(cfg_target_args, 'target'):
                target_to_run = getattr(cfg_target_args, 'target')
            # overwrite the value if it exists as command line option has higher priority.
            if oneutils.is_valid_attr(args, 'target'):
                target_to_run = args.target
            given_backend = backends.get_value_from_target_conf(
                target_to_run, BACKEND_KEY)
            if not given_backend:
                parser.error(f'Not found {target_to_run} target.')
        else:
            missing.append('[-b/--backend | -T/--target]')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))

    if not oneutils.is_valid_attr(args, 'config'):
        if not backend_args and not unknown_args:
            parser.error('commands for the backend is missing.')

    if cfg_backend_exist and cfg_backends_exist:
        parser.error(
            '\'backend\' option and \'backends\' option cannot be used simultaneously.')

    # Check if given backend from command line exists in the configuration file
    if cmd_backend_exist and cfg_backend_exist:
        if args.backend != cfg_args.backend:
            parser.error('Not found the command of given backend')

    if cfg_backend_exist and not oneutils.is_valid_attr(cfg_args, 'command'):
        parser.error('\'command\' key is missing in the configuration file.')

    if cfg_backends_exist:
        cfg_backends = getattr(cfg_args, 'backends').split(',')
        # check if commands of given backends exist
        for b in cfg_backends:
            if not oneutils.is_valid_attr(cfg_args, b):
                parser.error('Not found the command for ' + b)
        # Check if given backend from command line exists in the configuration file
        if cmd_backend_exist:
            if args.backend not in cfg_backends:
                parser.error('Not found the command of given backend')


def _parse_arg(parser):
    profile_args = []
    backend_args = []
    unknown_args = []
    argv = copy.deepcopy(sys.argv)
    # delete file name
    del argv[0]
    # split by '--'
    args = [list(y) for x, y in itertools.groupby(argv, lambda z: z == '--') if not x]
    if len(args) == 0:
        profile_args = parser.parse_args(profile_args)
    # one-profile has two interfaces
    # 1. one-profile [-h] [-v] [-C CONFIG] [-b BACKEND | -T TARGET] [COMMANDS FOR BACKEND]
    if len(args) == 1:
        profile_args = args[0]
        profile_args, unknown_args = parser.parse_known_args(profile_args)
    # 2. one-profile [-h] [-v] [-C CONFIG] [-b BACKEND | -T TARGET] -- [COMMANDS FOR BACKEND]
    if len(args) == 2:
        profile_args = args[0]
        backend_args = args[1]
        profile_args = parser.parse_args(profile_args)
    # print version
    if len(args) and profile_args.version:
        oneutils.print_version_and_exit(__file__)

    return profile_args, backend_args, unknown_args


def main():
    # get backend list
    backends_list = _get_backends_list()

    # parse arguments
    parser = _get_parser(backends_list)
    args, backend_args, unknown_args = _parse_arg(parser)

    # parse configuration file
    cfg_args = SimpleNamespace()
    oneutils.parse_cfg(args.config, 'one-profile', cfg_args)
    cfg_target_args = SimpleNamespace()
    oneutils.parse_cfg(args.config, 'backend', cfg_target_args, quiet=True)

    # verify arguments
    _verify_arg(parser, args, cfg_args, cfg_target_args, backend_args, unknown_args)
    '''
    one-profile defines its behavior for below cases.

    [1] one-profile -h
    [2] one-profile -v
    [3] one-profile -C ${cfg} (backend, command key in cfg)
    [4] one-profile -C ${cfg} (backends key in cfg)
    [5] one-profile -b ${backend} ${command}
    [6] one-profile -b ${backend} -- ${command}
    [7] one-profile -b ${backend} -C {cfg} (backend, command key in cfg)
    [8] one-profile -b ${backend} -C {cfg} (backends key in cfg) (Only 'backend' is invoked, 
         even though cfg file has multiple backends)
    [9] one-profile -b ${backend} -C ${cfg} -- ${command} (backend, command key in cfg) 
    [10] one-profile -b ${backend} -C ${cfg} -- ${command} (backends key in cfg) (Only 'backend' is invoked, 
         even though cfg file has multiple backends)
    [11] one-profile -C {cfg} (w/ target, w/ command schema)
    [12] one-profile -C {cfg} (w/ target, w/o command schema)
    [13] one-profile -C {cfg} -T {target} (w/ command schema)
    [14] one-profile -C {cfg} -T {target} (w/o command schema)
    [15] one-profile -T {target} ${command}
    [16] one-profile -T {target} -- ${command}

    All other cases are not allowed or an undefined behavior.
    '''
    # decide target
    target_to_run = None
    if oneutils.is_valid_attr(cfg_target_args, 'target'):
        target_to_run = getattr(cfg_target_args, 'target')
    # overwrite the value if it exists as command line option has higher priority.
    if oneutils.is_valid_attr(args, 'target'):
        target_to_run = args.target

    cmd_overwrite = False
    parser = None
    # decide which backend to run
    if oneutils.is_valid_attr(args, 'config'):
        # [9], [10]
        if backend_args and not unknown_args:
            given_backends = [args.backend]
            cmd_overwrite = True
        else:
            # [7], [8]
            if oneutils.is_valid_attr(args, 'backend'):
                given_backends = [args.backend]
                if oneutils.is_valid_attr(cfg_args, 'backend'):
                    assert (oneutils.is_valid_attr(cfg_args, 'command'))
                    setattr(cfg_args, args.backend, cfg_args.command)
            else:
                given_backend = None
                # get backend information
                if target_to_run:
                    given_backend = backends.get_value_from_target_conf(
                        target_to_run, BACKEND_KEY)
                # check if command schema exists
                # 1. if it exists, run the command according to the schema.
                # 2. if it doesn't exist, insert "--target ${TARGET}" at the beginning of the given command.
                parser = oneutils.get_arg_parser(given_backend,
                                                 cmd="profile",
                                                 target=target_to_run)
                # [11], [13]
                if target_to_run and parser:
                    if oneutils.is_valid_attr(cfg_args, 'command'):
                        given_backends = [given_backend]
                        setattr(cfg_args, given_backend, cfg_args.command)
                        # If "command" key exists with target option, command schema is not used. ${BACKEND}-profile will be run as before.
                        print(
                            "WARNING: 'command' key in the [one-profile] will be deprecated as of September 1, 2025."
                        )
                    else:
                        # DO NOTHING
                        pass
                # [12], [14]
                else:
                    # [3]
                    if oneutils.is_valid_attr(cfg_args, 'backend'):
                        assert (oneutils.is_valid_attr(cfg_args, 'command'))
                        given_backends = [cfg_args.backend]
                        setattr(cfg_args, cfg_args.backend, cfg_args.command)
                    # [4]
                    if oneutils.is_valid_attr(cfg_args, 'backends'):
                        given_backends = cfg_args.backends.split(',')
    else:
        assert (backend_args or unknown_args)
        # [5], [6]
        if oneutils.is_valid_attr(args, 'backend'):
            given_backends = [args.backend]
        # [15], [16]
        else:
            assert oneutils.is_valid_attr(args, 'target')
            given_backends = [
                backends.get_value_from_target_conf(target_to_run, BACKEND_KEY)
            ]

    # make commands
    # 1. if command schema exists
    if parser and not oneutils.is_valid_attr(cfg_args, 'command'):
        profile_cmd = parser.make_cmd(cfg_args)

        # run backend driver
        oneutils.run(profile_cmd, err_prefix=parser.driver)
    # 2. if command schema doesn't exist
    else:
        for given_backend in given_backends:
            # make a command to run given backend driver
            profile_path = None
            backend_base = given_backend + '-profile'
            for cand in backends_list:
                if ntpath.basename(cand) == backend_base:
                    profile_path = cand
            if not profile_path:
                raise FileNotFoundError(backend_base + ' not found')

            profile_cmd = [profile_path]
            # "--target" option is intentionally inserted at the beginning of the command.
            # It would match the command of backends' tool.
            if target_to_run:
                profile_cmd += ['--target', target_to_run]
            if not cmd_overwrite and oneutils.is_valid_attr(cfg_args, given_backend):
                profile_cmd += getattr(cfg_args, given_backend).split()
            else:
                profile_cmd += backend_args
                profile_cmd += unknown_args

            # run backend driver
            oneutils.run(profile_cmd, err_prefix=backend_base)


if __name__ == '__main__':
    main()
