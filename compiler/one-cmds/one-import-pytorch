#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2025 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
one-import-pytorch
==================

Command-line tool that converts an ExportedProgram (`.pt2`) generated by
`torch.export.export` into a **circle** model. All graph lowering and
optimization are handled by **TICO**, an open-source library for translating
PyTorch modules into models.

Typical workflow
----------------
1.  In Python, freeze the model:

        import torch
        from torch.export import export

        exported = export(model, (example_inputs,))
        exported.save("model.pt2")

2.  From the shell, run:

        one-import-pytorch -i model.pt2 -o model.circle

Features
--------
* **No live modules needed**: works from the frozen `.pt2` artifact alone.
* **Powered by TICO**: benefits from TICO's graph rewrites.
"""

import sys

try:
    import tico
except ImportError:
    if sys.version_info < (3, 10):
        raise RuntimeError("Python 3.10 or higher is required to install and use `tico`.")
    else:
        # Re-raise the original ImportError if the Python version is sufficient.
        raise

import argparse
import os

import torch

import onelib.utils as oneutils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def get_driver_cfg_section():
    return "one-import-pytorch"


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to convert a ExportedProgram (.pt2) into a circle')

    oneutils.add_default_arg(parser)

    ## arguments
    converter_group = parser.add_argument_group('converter arguments')

    # input and output path.
    converter_group.add_argument('-i',
                                 '--input_path',
                                 type=str,
                                 help='full filepath of the input .pt2 file')
    converter_group.add_argument('-o',
                                 '--output_path',
                                 type=str,
                                 help='full filepath of the output .circle file')

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not oneutils.is_valid_attr(args, 'input_path'):
        missing.append('-i/--input_path')
    if not oneutils.is_valid_attr(args, 'output_path'):
        missing.append('-o/--output_path')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        oneutils.print_version_and_exit(__file__)

    return args


def _convert(args):
    exported_program = torch.export.load(args.input_path)
    cm = tico.convert_from_exported_program(exported_program)
    cm.save(args.output_path)


def main():
    # parse arguments
    parser = _get_parser()
    args = _parse_arg(parser)

    # parse configuration file
    oneutils.parse_cfg(args.config, 'one-import-pytorch', args)

    # verify arguments
    _verify_arg(parser, args)

    # convert
    _convert(args)


if __name__ == '__main__':
    oneutils.safemain(main, __file__)
