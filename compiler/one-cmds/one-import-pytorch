#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import tempfile
import torch
import onnx
import onnx_tf
import numpy as np

import utils as _utils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to convert PyTorch to Circle')

    _utils._add_default_arg(parser)

    ## converter arguments
    converter_group = parser.add_argument_group('converter arguments')

    # input and output path.
    converter_group.add_argument(
        '-i', '--input_path', type=str, help='full filepath of the input file')
    converter_group.add_argument(
        '-o', '--output_path', type=str, help='full filepath of the output file')

    # input arrays.
    converter_group.add_argument(
        '-s',
        '--input_shapes',
        type=str,
        help='Shapes corresponding to --input_arrays, colon-separated.(ex:\"1,4,4,3:1,20,20,3\")')
    converter_group.add_argument(
        '-t',
        '--input_types',
        type=str,
        help='data types of input tensors, colon-separated (ex: float32, uint8, int32)')

    # fixed options
    tf2tflite_group = parser.add_argument_group('tf2tfliteV2 arguments')
    tf2tflite_group.add_argument('--model_format', default='saved_model')
    tf2tflite_group.add_argument('--converter_version', default='v2')

    # save intermediate file(s)
    parser.add_argument(
        '--save_intermediate',
        action='store_true',
        help='Save intermediate files to output folder')

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not _utils._is_valid_attr(args, 'input_path'):
        missing.append('-i/--input_path')
    if not _utils._is_valid_attr(args, 'output_path'):
        missing.append('-o/--output_path')
    if not _utils._is_valid_attr(args, 'input_shapes'):
        missing.append('-s/--input_shapes')
    if not _utils._is_valid_attr(args, 'input_types'):
        missing.append('-t/--input_types')

    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        _utils._print_version_and_exit(__file__)

    return args


def _apply_verbosity(verbosity):
    # NOTE
    # TF_CPP_MIN_LOG_LEVEL
    #   0 : INFO + WARNING + ERROR + FATAL
    #   1 : WARNING + ERROR + FATAL
    #   2 : ERROR + FATAL
    #   3 : FATAL
    if verbosity:
        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'
    else:
        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


def _parse_shapes(shapes_str):
    array = shapes_str.split(":")
    shapes = [
        list(map(int, shape.split(",")))
        for shape in array
    ]
    return shapes


def _parse_types(types_str):
    # There are no convenient way to create torch from string ot numpy dtype, so using this workaround
    dtype_dict = {
        "bool"       : torch.bool,
        "uint8"      : torch.uint8,
        "int8"       : torch.int8,
        "int16"      : torch.int16,
        "int32"      : torch.int32,
        "int64"      : torch.int64,
        "float16"    : torch.float16,
        "float32"    : torch.float32,
        "float64"    : torch.float64,
        "complex64"  : torch.complex64,
        "complex128" : torch.complex128
    }
    array = types_str.split(",")
    types = [dtype_dict[type_str.strip()] for type_str in array]
    return types


def _convert(args):
    _apply_verbosity(args.verbose)

    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    with open(logfile_path, 'wb') as f, tempfile.TemporaryDirectory() as tmpdir:
        # save intermediate
        if _utils._is_valid_attr(args, 'save_intermediate'):
            tmpdir = os.path.dirname(logfile_path)
        # convert pytorch to onnx model
        pytorch_model = torch.load(getattr(args, 'input_path'))

        input_shapes = _parse_shapes(getattr(args, 'input_shapes'))
        input_types = _parse_types(getattr(args, 'input_types'))

        if len(input_shapes) != len(input_types):
            raise ValueError("number of input shapes and input types must be equal")

        sample_inputs = []
        for input_spec in zip(input_shapes, input_types):
           sample_inputs += torch.ones(input_spec[0], dtype = input_spec[1])

        sample_outputs = pytorch_model(*sample_inputs)

        onnx_output_name = os.path.splitext(os.path.basename(
                                    args.output_path))[0] + '.onnx'
        onnx_output_path = os.path.join(tmpdir, onnx_output_name)

        torch.onnx.export(pytorch_model, sample_inputs, onnx_output_path, example_outputs=sample_outputs)

        # convert onnx to tf saved mode
        onnx_model = onnx.load(onnx_output_path)
        tf_savedmodel = onnx_tf.backend.prepare(onnx_model)

        savedmodel_name = os.path.splitext(os.path.basename(
            args.output_path))[0] + '.savedmodel'
        savedmodel_output_path = os.path.join(tmpdir, savedmodel_name)
        tf_savedmodel.export_graph(savedmodel_output_path)

        # make a command to convert from tf to tflite
        tf2tfliteV2_path = os.path.join(dir_path, 'tf2tfliteV2.py')
        tf2tfliteV2_output_name = os.path.splitext(os.path.basename(
            args.output_path))[0] + '.tflite'
        tf2tfliteV2_output_path = os.path.join(tmpdir, tf2tfliteV2_output_name)

        print(args)
        print(dir(args))
        print(type(args))

        del args.input_shapes
        tf2tfliteV2_cmd = _utils._make_tf2tfliteV2_cmd(
            args, tf2tfliteV2_path, savedmodel_output_path, tf2tfliteV2_output_path)

        f.write((' '.join(tf2tfliteV2_cmd) + '\n').encode())

        # convert tf to tflite
        _utils._run(tf2tfliteV2_cmd, logfile=f)

        # make a command to convert from tflite to circle
        tflite2circle_path = os.path.join(dir_path, 'tflite2circle')
        tflite2circle_cmd = _utils._make_tflite2circle_cmd(tflite2circle_path,
                                                           tf2tfliteV2_output_path,
                                                           getattr(args, 'output_path'))

        f.write((' '.join(tflite2circle_cmd) + '\n').encode())

        # convert tflite to circle
        _utils._run(tflite2circle_cmd, err_prefix="tflite2circle", logfile=f)


def main():
    # parse arguments
    parser = _get_parser()
    args = _parse_arg(parser)

    # parse configuration file
    _utils._parse_cfg(args, 'one-import-pytorch')

    # verify arguments
    _verify_arg(parser, args)

    # convert
    _convert(args)


if __name__ == '__main__':
    _utils._safemain(main, __file__)
