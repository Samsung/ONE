#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import configparser
import importlib
import os
import subprocess
import sys

import utils as _utils

# TODO Find better way to suppress trackback on error
# This suppression is applied only to `one-build`
sys.tracebacklimit = 0


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to run ONE drivers in customized order')

    _utils._add_default_arg(parser)

    opt_name_list = _utils._get_optimization_list(get_name=True)
    opt_name_list = ['-' + s for s in opt_name_list]
    if not opt_name_list:
        opt_help_message = '(No available optimization options)'
    else:
        opt_help_message = '(Available optimization options: ' + ', '.join(
            opt_name_list) + ')'
    opt_help_message = 'optimization name to use ' + opt_help_message
    parser.add_argument('-O', type=str, metavar='OPTIMIZATION', help=opt_help_message)

    return parser


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        _utils._print_version_and_exit(__file__)

    return args


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    if not _utils._is_valid_attr(args, 'config'):
        parser.error('-C/--config argument is required')
    # check if given optimization option exists
    opt_name_list = _utils._get_optimization_list(get_name=True)
    opt_name_list = [_utils._remove_prefix(s, 'O') for s in opt_name_list]
    if _utils._is_valid_attr(args, 'O'):
        if ' ' in getattr(args, 'O'):
            parser.error('Not allowed to have space in the optimization name')
        if not getattr(args, 'O') in opt_name_list:
            parser.error('Invalid optimization option')


def _parse_cfg(args):
    config = configparser.ConfigParser()
    config.optionxform = str
    parsed = config.read(os.path.expanduser(getattr(args, 'config')))
    if not parsed:
        raise FileNotFoundError('Not found given configuration file')
    return config


def _is_available_driver(config, driver_name):
    return config.has_option('one-build', driver_name) and config.getboolean(
        'one-build', driver_name)


def _verify_cfg(driver_list, config):
    if not config.has_section('one-build'):
        raise ImportError('[one-build] section is required in configuraion file')

    import_driver_cnt = 0
    for driver_path in driver_list:
        driver_spec = driver_list[driver_path]
        driver_name = driver_spec[0]
        driver_type = driver_spec[1]
        if driver_type == _utils.DriverType.IMPORTER and _is_available_driver(
                config, driver_name):
            import_driver_cnt += 1
    if import_driver_cnt > 1:
        raise AssertionError('Only one import-* driver can be executed')


# verify given optimization option file
def _verify_opt(args):
    if _utils._is_valid_attr(args, 'O'):
        config = configparser.ConfigParser()
        config.optionxform = str
        opt_name_path_dic = dict(
            zip(_utils._get_optimization_list(get_name=True),
                _utils._get_optimization_list()))
        parsed = config.read(opt_name_path_dic['O' + getattr(args, 'O')])
        # check if given optimization option file exists
        if not parsed:
            raise FileNotFoundError('Not found given optimization configuration file')
        # check if given optimization option file only has `one-optimize` section
        if len(config.sections()) == 1 and config.sections()[0] == 'one-optimize':
            pass
        else:
            raise AssertionError(
                'Optimization configuration file only allowed to have a \'one-optimize\' section'
            )


def _collect_available_drivers(accepted_types):
    drivers = {}
    for driver_path in os.listdir():
        module_name = os.path.basename(driver_path)
        module_loader = importlib.machinery.SourceFileLoader(module_name, driver_path)
        module_spec = importlib.util.spec_from_loader(module_name, module_loader)
        module = importlib.util.module_from_spec(module_spec)
        try:
            module_loader.exec_module(module)
        except:
            pass
        else:
            if hasattr(module, "get_driver_spec"):
                spec = module.get_driver_spec()
                if spec[1] in accepted_types:
                    drivers[driver_path] = spec

    return drivers


def main():
    # parse arguments
    # since the configuration file path is required first,
    # parsing of the configuration file proceeds after this.
    parser = _get_parser()
    args = _parse_arg(parser)

    # verify arguments
    _verify_arg(parser, args)

    # parse configuration file
    config = _parse_cfg(args)

    # verify configuration file
    driver_types = [_utils.DriverType.IMPORTER, _utils.DriverType.MISC]
    drivers = _collect_available_drivers(driver_types)
    _verify_cfg(drivers, config)

    # verify optimization option file
    _verify_opt(args)

    # get drivers to run
    driver_to_run = []
    for driver_path in drivers:
        driver_spec = drivers[driver_path]
        driver_name = driver_spec[0]
        if _is_available_driver(config, driver_name):
            driver_to_run.append(driver_path)

    # run
    dir_path = os.path.dirname(os.path.realpath(__file__))
    for driver_path in driver_to_run:
        section = drivers[driver_path][0]
        driver_path = os.path.join(dir_path, driver_path)
        cmd = [driver_path, '--config', getattr(args, 'config'), '--section', section]
        if section == 'one-optimize' and _utils._is_valid_attr(args, 'O'):
            cmd += ['-O', getattr(args, 'O')]
        _utils._run(cmd)


if __name__ == '__main__':
    _utils._safemain(main, __file__)
