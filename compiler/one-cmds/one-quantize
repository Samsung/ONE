#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import tempfile

import utils as _utils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to quantize circle model')

    _utils._add_default_arg(parser)

    # input and output path.
    parser.add_argument(
        '-i', '--input_path', type=str, help='full filepath of the input file')
    parser.add_argument(
        '-d',
        '--input_data',
        type=str,
        help=
        'full filepath of the input data file. if not specified, run with random input data.'
    )
    parser.add_argument(
        '-f',
        '--input_data_format',
        type=str,
        help=
        'file format of input data. h5/hdf5 (default), list/filelist (a text file where a file path of input data is written in each line), or dir/directory (a directory where input data are saved)'
    )
    parser.add_argument(
        '-o', '--output_path', type=str, help='full filepath of the output file')

    # argument for profiling
    parser.add_argument(
        '-p',
        '--generate_profile_data',
        action='store_true',
        help='generate profiling data')

    ## arguments for quantization
    quantization_group = parser.add_argument_group('arguments for quantization')

    quantization_group.add_argument(
        '--input_dtype',
        type=str,
        help='input data type (supported: float32, default=float32)')
    quantization_group.add_argument(
        '--quantized_dtype',
        type=str,
        help='output quantized data type (supported: uint8, int16, default=uint8)')
    quantization_group.add_argument(
        '--granularity',
        type=str,
        help='quantize granularity (supported: layer, channel, default=layer)')
    quantization_group.add_argument(
        '--min_percentile', type=str, help='minimum percentile (0.0~100.0, default=1.0)')
    quantization_group.add_argument(
        '--max_percentile', type=str, help='maximum percentile (0.0~100.0, default=99.0)')
    quantization_group.add_argument(
        '--mode',
        type=str,
        help='record mode (supported: percentile/moving_average, default=percentile)')

    # arguments for force_quantparam
    parser.add_argument(
        '--force_quantparam',
        action='store_true',
        help='write quantparam to the specified tensor')
    parser.add_argument(
        '--tensor_name', type=str, action='append', help='tensor name (string)')
    parser.add_argument('--scale', type=float, action='append', help='scale (float)')
    parser.add_argument(
        '--zero_point', type=int, action='append', help='zero point (int)')

    return parser


def _set_default_values(args):
    if not _utils._is_valid_attr(args, 'input_dtype'):
        setattr(args, 'input_dtype', 'float32')
    if not _utils._is_valid_attr(args, 'quantized_dtype'):
        setattr(args, 'quantized_dtype', 'uint8')
    if not _utils._is_valid_attr(args, 'granularity'):
        setattr(args, 'granularity', 'layer')
    if not _utils._is_valid_attr(args, 'mode'):
        setattr(args, 'mode', 'percentile')
    if not _utils._is_valid_attr(args, 'min_percentile'):
        setattr(args, 'min_percentile', '1.0')
    if not _utils._is_valid_attr(args, 'max_percentile'):
        setattr(args, 'max_percentile', '99.0')


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not _utils._is_valid_attr(args, 'input_path'):
        missing.append('-i/--input_path')
    if not _utils._is_valid_attr(args, 'output_path'):
        missing.append('-o/--output_path')
    if _utils._is_valid_attr(args, 'force_quantparam'):
        if not _utils._is_valid_attr(args, 'tensor_name'):
            missing.append('--tensor_name')
        if not _utils._is_valid_attr(args, 'scale'):
            missing.append('--scale')
        if not _utils._is_valid_attr(args, 'zero_point'):
            missing.append('--zero_point')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))
    if _utils._is_valid_attr(args, 'force_quantparam'):
        tensors = getattr(args, 'tensor_name')
        scales = getattr(args, 'scale')
        zerops = getattr(args, 'zero_point')
        if len(tensors) != len(scales) or len(tensors) != len(zerops):
            parser.error(
                'The same number of tensor_name, scale, and zero_point should be given.')


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        _utils._print_version_and_exit(__file__)

    return args


def _quantize(args):
    if _utils._is_valid_attr(args, 'force_quantparam'):
        # write quantization parameters
        _write_qparam(args)
        return

    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    with open(logfile_path, 'wb') as f, tempfile.TemporaryDirectory() as tmpdir:
        # get driver path
        circle_quantizer_path = os.path.join(dir_path, 'circle-quantizer')
        record_minmax_path = os.path.join(dir_path, 'record-minmax')

        ## make a command to quantize and dequantize the weights of the model
        circle_quantizer_cmd = [circle_quantizer_path]
        # verbose
        if _utils._is_valid_attr(args, 'verbose'):
            circle_quantizer_cmd.append('--verbose')
        # quantize_dequantize_weights
        circle_quantizer_cmd.append('--quantize_dequantize_weights')
        if _utils._is_valid_attr(args, 'input_dtype'):
            circle_quantizer_cmd.append(getattr(args, 'input_dtype'))
        if _utils._is_valid_attr(args, 'quantized_dtype'):
            circle_quantizer_cmd.append(getattr(args, 'quantized_dtype'))
        if _utils._is_valid_attr(args, 'granularity'):
            circle_quantizer_cmd.append(getattr(args, 'granularity'))
        # input and output path
        if _utils._is_valid_attr(args, 'input_path'):
            circle_quantizer_cmd.append(getattr(args, 'input_path'))
        tmp_output_path_1 = os.path.join(
            tmpdir,
            os.path.splitext(os.path.basename(args.input_path))[0]) + '1.circle'
        circle_quantizer_cmd.append(tmp_output_path_1)
        # profiling
        if _utils._is_valid_attr(args, 'generate_profile_data'):
            circle_quantizer_cmd.append('--generate_profile_data')

        f.write((' '.join(circle_quantizer_cmd) + '\n').encode())

        # run circle-quantizer
        _utils._run(circle_quantizer_cmd, err_prefix="circle_quantizer", logfile=f)

        ## make a command to record min-max value of each tensor while running the representative dataset
        circle_record_minmax_cmd = [record_minmax_path]
        # verbose
        if _utils._is_valid_attr(args, 'verbose'):
            circle_record_minmax_cmd.append('--verbose')
        # input and output path
        circle_record_minmax_cmd.append('--input_model')
        circle_record_minmax_cmd.append(tmp_output_path_1)
        tmp_output_path_2 = os.path.join(
            tmpdir,
            os.path.splitext(os.path.basename(args.input_path))[0]) + '2.circle'
        circle_record_minmax_cmd.append('--output_model')
        circle_record_minmax_cmd.append(tmp_output_path_2)
        # input data
        if _utils._is_valid_attr(args, 'input_data'):
            circle_record_minmax_cmd.append('--input_data')
            circle_record_minmax_cmd.append(getattr(args, 'input_data'))
        if _utils._is_valid_attr(args, 'input_data_format'):
            circle_record_minmax_cmd.append('--input_data_format')
            circle_record_minmax_cmd.append(getattr(args, 'input_data_format'))
        # min and max percentile
        if _utils._is_valid_attr(args, 'min_percentile'):
            circle_record_minmax_cmd.append('--min_percentile')
            circle_record_minmax_cmd.append(getattr(args, 'min_percentile'))
        if _utils._is_valid_attr(args, 'max_percentile'):
            circle_record_minmax_cmd.append('--max_percentile')
            circle_record_minmax_cmd.append(getattr(args, 'max_percentile'))
        # mode
        if _utils._is_valid_attr(args, 'mode'):
            circle_record_minmax_cmd.append('--mode')
            circle_record_minmax_cmd.append(getattr(args, 'mode'))
        # profiling
        if _utils._is_valid_attr(args, 'generate_profile_data'):
            circle_record_minmax_cmd.append('--generate_profile_data')

        f.write((' '.join(circle_record_minmax_cmd) + '\n').encode())

        # run record-minmax
        _utils._run(circle_record_minmax_cmd, err_prefix="record_minmax", logfile=f)

        ## make a second command to quantize the model using the embedded information
        circle_quantizer_cmd = [circle_quantizer_path]
        # verbose
        if _utils._is_valid_attr(args, 'verbose'):
            circle_quantizer_cmd.append('--verbose')
        # quantize_dequantize_weights
        circle_quantizer_cmd.append('--quantize_with_minmax')
        if _utils._is_valid_attr(args, 'input_dtype'):
            circle_quantizer_cmd.append(getattr(args, 'input_dtype'))
        if _utils._is_valid_attr(args, 'quantized_dtype'):
            circle_quantizer_cmd.append(getattr(args, 'quantized_dtype'))
        if _utils._is_valid_attr(args, 'granularity'):
            circle_quantizer_cmd.append(getattr(args, 'granularity'))
        # input and output path
        circle_quantizer_cmd.append(tmp_output_path_2)
        if _utils._is_valid_attr(args, 'output_path'):
            circle_quantizer_cmd.append(getattr(args, 'output_path'))
        # profiling
        if _utils._is_valid_attr(args, 'generate_profile_data'):
            circle_quantizer_cmd.append('--generate_profile_data')

        f.write((' '.join(circle_quantizer_cmd) + '\n').encode())

        # run circle-quantizer
        _utils._run(circle_quantizer_cmd, err_prefix="circle_quantizer", logfile=f)


def _write_qparam(args):
    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    with open(logfile_path, 'wb') as f:
        # get driver path
        circle_quantizer_path = os.path.join(dir_path, 'circle-quantizer')

        # make a command to write qparams to the tensors
        circle_quantizer_cmd = [circle_quantizer_path]
        # verbose
        if _utils._is_valid_attr(args, 'verbose'):
            circle_quantizer_cmd.append('--verbose')
        if _utils._is_valid_attr(args, 'tensor_name'):
            tensor_name = getattr(args, 'tensor_name')
        if _utils._is_valid_attr(args, 'scale'):
            scale = getattr(args, 'scale')
        if _utils._is_valid_attr(args, 'zero_point'):
            zero_point = getattr(args, 'zero_point')
        for (t, s, zp) in zip(tensor_name, scale, zero_point):
            circle_quantizer_cmd.append('--force_quantparam')
            circle_quantizer_cmd.append(t)
            circle_quantizer_cmd.append(str(s))
            circle_quantizer_cmd.append(str(zp))
        # input and output path
        if _utils._is_valid_attr(args, 'input_path'):
            circle_quantizer_cmd.append(getattr(args, 'input_path'))
        if _utils._is_valid_attr(args, 'output_path'):
            circle_quantizer_cmd.append(getattr(args, 'output_path'))

        f.write((' '.join(circle_quantizer_cmd) + '\n').encode())

        # run circle-quantizer
        _utils._run(circle_quantizer_cmd, err_prefix="circle_quantizer", logfile=f)


def main():
    # parse arguments
    parser = _get_parser()
    args = _parse_arg(parser)

    # parse configuration file
    _utils._parse_cfg(args, 'one-quantize')

    # set default values
    _set_default_values(args)

    # verify arguments
    _verify_arg(parser, args)

    # quantize
    _quantize(args)


if __name__ == '__main__':
    _utils._safemain(main, __file__)
