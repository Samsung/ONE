#!/bin/bash

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE check if we can use python3.8 for Ubuntu 18.04.
# use +e as python3.8 may not exist in the system and 'command' will return error.
set +e

PYTHON3_EXEC=$(command -v python3.8)
if [[ -z "${PYTHON3_EXEC}" ]]; then
  PYTHON3_EXEC=$(command -v python3)
fi
if [[ -z "${PYTHON3_EXEC}" ]]; then
  echo "Error one-prepare-venv: python3 not found"
  exit -1
fi

set -e

DRIVER_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

VENV_ACTIVATE=${DRIVER_PATH}/venv/bin/activate
# NOTE please use venv's python instead of python after `source activation`.
# This script is called by debian maintainer script, i.e. `postinst`.
# Since debian maintainer script is called with sudo, `source activation` is ignored.
VENV_PYTHON=${DRIVER_PATH}/venv/bin/python

if [ ! -f ${VENV_ACTIVATE} ]; then
  # Create python virtual enviornment
  ${PYTHON3_EXEC} -m venv "${DRIVER_PATH}/venv"
fi

# load DISTRIB_CODENAME value from lsb-release file.
# this should exist for all Ubuntu.
if [ ! -f "/etc/lsb-release" ]; then
  echo "Error one-prepare-venv: /etc/lsb-release file not found"
  exit -1
fi
source /etc/lsb-release

# NOTE version
# - https://github.com/onnx/onnx/blob/master/docs/Versioning.md
# - https://github.com/onnx/onnx-tensorflow/blob/master/Versioning.md

VER_TENSORFLOW=2.12.1
VER_TF_PROB=0.20.1
VER_TF_ADON=0.20.0
VER_ONNX=1.16.0
VER_ONNXRUNTIME=1.18.0
VER_ONNX_TF=1.10.0
VER_PYDOT=1.4.2
VER_TORCH="2.1.2+cpu"
VER_PROTOBUF=4.23.3
VER_NUMPY=1.24.3

echo "Setting version for '$DISTRIB_CODENAME'"
if [[ "$DISTRIB_CODENAME" == "bionic" ]]; then
  : # use as is
elif [[ "$DISTRIB_CODENAME" == "focal" ]]; then
  : # use as is
elif [[ "$DISTRIB_CODENAME" == "jammy" ]]; then
  : # TODO change vesions
elif [[ "$DISTRIB_CODENAME" == "noble" ]]; then
  : # TODO change vesions
else
  echo "Error one-prepare-venv: Unsupported codename $DISTRIB_CODENAME"
  exit -1
fi

PIP_TRUSTED_HOST="--trusted-host pypi.org "
PIP_TRUSTED_HOST+="--trusted-host pypi.python.org "
PIP_TRUSTED_HOST+="--trusted-host files.pythonhosted.org "
PIP_TRUSTED_HOST+="--trusted-host download.pytorch.org "

PIP_TIMEOUT="--default-timeout=1000 "

PIP_OPTIONS="${PIP_TIMEOUT} ${PIP_TRUSTED_HOST}"

# NOTE $ONE_PREPVENV_PIP_OPTION is to provide additional PIP options
# such as ceritificate file behind firewall
# ex) ONE_PREPVENV_PIP_OPTION="--cert SomePrivateCetificate.crt" ./one-prepare-venv
if [[ ! -z "$ONE_PREPVENV_PIP_OPTION" ]]; then
  PIP_OPTIONS+=" ${ONE_PREPVENV_PIP_OPTION} "
fi

# Install PyTorch and ONNX related
# NOTE set ONE_PREPVENV_TORCH_SOURCE to override options for source URL.
TORCH_SOURCE_OPTION="-f https://download.pytorch.org/whl/torch"
if [[ ! -z "$ONE_PREPVENV_TORCH_SOURCE" ]]; then
  TORCH_SOURCE_OPTION="${ONE_PREPVENV_TORCH_SOURCE}"
fi
# TODO remove torch message
echo "Torch from '${ONE_PREPVENV_TORCH_SOURCE}' -> '${TORCH_SOURCE_OPTION}'"

${VENV_PYTHON} -m pip ${PIP_OPTIONS} install --upgrade pip setuptools

PYTHON_PACKAGES="tensorflow-cpu==${VER_TENSORFLOW} "
PYTHON_PACKAGES+="Pillow "
PYTHON_PACKAGES+="tensorflow_probability==${VER_TF_PROB} "
PYTHON_PACKAGES+="tensorflow_addons==${VER_TF_ADON} "
PYTHON_PACKAGES+="torch==${VER_TORCH} "
PYTHON_PACKAGES+="onnx==${VER_ONNX} "
PYTHON_PACKAGES+="onnxruntime==${VER_ONNXRUNTIME} "
PYTHON_PACKAGES+="onnx-tf==${VER_ONNX_TF} "
PYTHON_PACKAGES+="protobuf==${VER_PROTOBUF} "
PYTHON_PACKAGES+="fsspec==2024.6.1 "
PYTHON_PACKAGES+="pydot==${VER_PYDOT} "
PYTHON_PACKAGES+="numpy==${VER_NUMPY} "

${VENV_PYTHON} -m pip ${PIP_OPTIONS} install --upgrade ${PYTHON_PACKAGES} ${TORCH_SOURCE_OPTION}
