#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys

import utils as _utils


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to convert various format to circle',
        formatter_class=argparse.RawTextHelpFormatter)

    # configuration file
    parser.add_argument('-C', '--config', type=str, help='run with configuation file')

    # driver
    parser.add_argument(
        'driver', type=str, help='driver name to run (supported: tf, tflite,' \
        ' bcq, onnx)')

    # version
    dir_path = os.path.dirname(os.path.realpath(__file__))
    one_version_path = os.path.join(dir_path, 'one-version')
    version = subprocess.check_output([one_version_path]).decode('utf-8')
    version_str = '\n'.join(['one-import version {}'.format(version), \
    'Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved', \
    'Licensed under the Apache License, Version 2.0', \
    'https://github.com/Samsung/ONE'])
    parser.add_argument('-v', '--version', action='version', version=version_str)

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    pass
    # TODO verify arguments


def _parse_arg(parser):
    args, unknown_args = parser.parse_known_args()

    return args, unknown_args


def _get_driver_name(driver_name):
    return {
        'bcq': 'one-import-bcq',
        'tf': 'one-import-tf',
        'tflite': 'one-import-tflite',
        'onnx': 'one-import-onnx',
    }[driver_name]


def _convert(args, unknown_args):
    # get directory path
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # make cmd
    cmd = [sys.executable, os.path.join(dir_path, _get_driver_name(args.driver))]
    if _utils._is_valid_attr(args, 'config'):
        cmd.append('--config')
        cmd.append(os.path.expanduser(args.config))
    return_code = subprocess.call(cmd + unknown_args)
    if return_code != 0:
        sys.exit(return_code)


def main():
    # parse arguments
    parser = _get_parser()
    args, unknown_args = _parse_arg(parser)

    # verify arguments
    _verify_arg(parser, args)

    # convert
    _convert(args, unknown_args)


if __name__ == '__main__':
    main()
