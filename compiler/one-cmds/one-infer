#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2022 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import copy
import glob
import itertools
import ntpath
import os
import sys

import onelib.utils as oneutils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def _search_backend_driver(driver):
    """
    [one hierarchy]
    one
    ├── backends
    ├── bin
    ├── doc
    ├── include
    ├── lib
    ├── optimization
    └── test

    The list where `one-infer` finds its backend driver
    - `bin` folder where `one-infer` exists
    - `backends/**/bin/` folder

    NOTE If there are drivers of the same name in different places,
     the closer to the top in the list, the higher the priority.
    """
    dir_path = os.path.dirname(os.path.realpath(__file__))

    # CASE 1: one/bin/{driver} is found
    driver_path = dir_path + '/' + driver
    if os.path.isfile(driver_path) and os.access(driver_path, os.X_OK):
        return driver_path

    # CASE 2: one/backends/**/bin/{driver} is found
    for driver_path in glob.glob(
            dir_path + '/../backends/**/bin/' + driver, recursive=True):
        if os.path.isfile(driver_path) and os.access(driver_path, os.X_OK):
            return driver_path

    # CASE 3: {driver} is found in nowhere
    return None


def _get_parser():
    infer_usage = 'one-infer [-h] [-v] [-C CONFIG] [-d DRIVER] [--post-process POST_PROCESS] [--] [COMMANDS FOR BACKEND DRIVER]'
    infer_detail = """
one-infer provides post-processing after invoking backend inference driver
use python script and its arguments to '--post-process' argument as below
one-infer -d dummy-infer --post-process "script.py arg1 arg2" -- [arguments for dummy-infer]
"""
    parser = argparse.ArgumentParser(
        description='command line tool to infer model',
        usage=infer_usage,
        epilog=infer_detail,
        formatter_class=argparse.RawTextHelpFormatter)

    oneutils.add_default_arg(parser)

    driver_help_message = 'backend inference driver name to execute'
    parser.add_argument('-d', '--driver', type=str, help=driver_help_message)

    post_process_help_message = 'post processing python script and arguments which can be used to convert I/O data to standard format'
    parser.add_argument('--post-process', type=str, help=post_process_help_message)

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    missing = []
    if not oneutils.is_valid_attr(args, 'driver'):
        missing.append('-d/--driver')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    infer_args = []
    backend_args = []
    argv = copy.deepcopy(sys.argv)
    # delete file name
    del argv[0]
    # split by '--'
    args = [list(y) for x, y in itertools.groupby(argv, lambda z: z == '--') if not x]

    # one-infer [-h] [-v] [-C CONFIG] [-d DRIVER] [--post-process POST_PROCESS] -- [COMMANDS FOR BACKEND DRIVER]
    if len(args):
        infer_args = args[0]
        infer_args = parser.parse_args(infer_args)
        backend_args = backend_args if len(args) < 2 else args[1]
    # print version
    if len(args) and infer_args.version:
        oneutils.print_version_and_exit(__file__)

    return infer_args, backend_args


def _get_executable(args):
    driver = oneutils.is_valid_attr(args, 'driver')

    executable = _search_backend_driver(driver)
    if executable:
        return executable
    else:
        raise FileNotFoundError(driver + ' not found')


def main():
    # parse arguments
    parser = _get_parser()
    args, backend_args = _parse_arg(parser)

    # parse configuration file
    oneutils.parse_cfg(args, 'one-infer')

    # verify arguments
    _verify_arg(parser, args)

    # make a command to run given backend driver
    driver_path = _get_executable(args)
    infer_cmd = [driver_path] + backend_args
    if oneutils.is_valid_attr(args, 'command'):
        infer_cmd += getattr(args, 'command').split()

    # run backend driver
    oneutils.run(infer_cmd, err_prefix=ntpath.basename(driver_path))

    # run post process script if it's given
    if oneutils.is_valid_attr(args, 'post_process'):
        # NOTE: the given python script will be executed by venv of ONE
        python_path = sys.executable
        post_process_command = [python_path] + getattr(args,
                                                       'post_process').strip().split(' ')
        oneutils.run(post_process_command, err_prefix='one-infer')


if __name__ == '__main__':
    oneutils.safemain(main, __file__)
