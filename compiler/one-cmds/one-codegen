#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import copy
import glob
import itertools
import ntpath
import os
import subprocess
import sys
import tempfile
import shutil

import utils as _utils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def _get_backends_list():
    """
    [one hierarchy]
    one
    ├── backends
    ├── bin
    ├── doc
    ├── include
    ├── lib
    └── test

    The list where `one-codegen` finds its backends
    - `bin` folder where `one-codegen` exists
    - `backends` folder
    - System path

    NOTE If there are backends of the same name in different places,
     the closer to the top in the list, the higher the priority.
    """
    dir_path = os.path.dirname(os.path.realpath(__file__))
    backend_set = set()

    # bin folder
    files = [f for f in glob.glob(dir_path + '/*-compile')]
    # backends folder
    files += [
        f for f in glob.glob(dir_path + '/../backends/**/*-compile', recursive=True)
    ]
    # TODO find backends in `$PATH`

    backends_list = []
    for cand in files:
        base = ntpath.basename(cand)
        if not base in backend_set and os.path.isfile(cand) and os.access(cand, os.X_OK):
            backend_set.add(base)
            backends_list.append(cand)

    return backends_list


def _get_parser(backends_list):
    codegen_usage = 'one-codegen [-h] [-v] [-C CONFIG] [-b BACKEND] [--] [COMMANDS FOR BACKEND]'
    parser = argparse.ArgumentParser(
        description='command line tool for code generation', usage=codegen_usage)

    _utils._add_default_arg(parser)

    # get backend list in the directory
    backends_name = [ntpath.basename(f) for f in backends_list]
    if not backends_name:
        backends_name_message = '(There is no available backend drivers)'
    else:
        backends_name_message = '(available backend drivers: ' + ', '.join(
            backends_name) + ')'
    backend_help_message = 'backend name to use ' + backends_name_message
    parser.add_argument('-b', '--backend', type=str, help=backend_help_message)

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not _utils._is_valid_attr(args, 'backend'):
        missing.append('-b/--backend')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    codegen_args = []
    backend_args = []
    unknown_args = []
    argv = copy.deepcopy(sys.argv)
    # delete file name
    del argv[0]
    # split by '--'
    args = [list(y) for x, y in itertools.groupby(argv, lambda z: z == '--') if not x]
    # one-codegen has two interfaces
    # 1. one-codegen [-h] [-v] [-C CONFIG] [-b BACKEND] [COMMANDS FOR BACKEND]
    if len(args) == 1:
        codegen_args = args[0]
        codegen_args, unknown_args = parser.parse_known_args(codegen_args)
    # 2. one-codegen [-h] [-v] [-C CONFIG] [-b BACKEND] -- [COMMANDS FOR BACKEND]
    if len(args) == 2:
        codegen_args = args[0]
        backend_args = args[1]
        codegen_args = parser.parse_args(codegen_args)
    # print version
    if len(args) and codegen_args.version:
        _utils._print_version_and_exit(__file__)

    return codegen_args, backend_args, unknown_args


def main():
    # get backend list
    backends_list = _get_backends_list()

    # parse arguments
    parser = _get_parser(backends_list)
    args, backend_args, unknown_args = _parse_arg(parser)

    # parse configuration file
    _utils._parse_cfg(args, 'one-codegen')

    # verify arguments
    _verify_arg(parser, args)

    # make a command to run given backend driver
    codegen_path = None
    backend_base = getattr(args, 'backend') + '-compile'
    for cand in backends_list:
        if ntpath.basename(cand) == backend_base:
            codegen_path = cand
    if not codegen_path:
        # Find backend from system path
        codegen_path = shutil.which(backend_base)

    if not codegen_path:
        raise FileNotFoundError(backend_base + ' not found')
    codegen_cmd = [codegen_path] + backend_args + unknown_args
    if _utils._is_valid_attr(args, 'command'):
        codegen_cmd += getattr(args, 'command').split()

    # run backend driver
    _utils._run(codegen_cmd, err_prefix=backend_base)


if __name__ == '__main__':
    _utils._safemain(main, __file__)
