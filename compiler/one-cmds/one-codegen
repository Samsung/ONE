#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"                  # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import tempfile

import utils as _utils


def _get_backends_list():
    dir_path = os.path.dirname(os.path.realpath(__file__))
    files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]
    backends_list = []
    for cand in files:
        if cand.endswith('-compile'):
            # 8 : length of '-compile'
            backends_list.append(cand[:-8])
    return backends_list


def _get_parser():
    parser = argparse.ArgumentParser(description='command line tool for code generation')

    _utils._add_default_arg(parser)

    # get backend list in the directory
    backends_list = _get_backends_list()
    if not backends_list:
        backends_list_message = '(There is no available backend drivers)'
    else:
        backends_list_message = '(available backend drivers: ' + '.'.join(
            backends_list) + ')'
    backend_help_message = 'backend name to use ' + backends_list_message
    parser.add_argument('-b', '--backend', type=str, help=backend_help_message)

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not _utils._is_valid_attr(args, 'backend'):
        missing.append('-b/--backend')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args, unknown_args = parser.parse_known_args()
    # print version
    if args.version:
        _utils._print_version_and_exit(__file__)

    return args, unknown_args


def main():
    # parse arguments
    parser = _get_parser()
    args, unknown_args = _parse_arg(parser)

    # parse configuration file
    _utils._parse_cfg(args, 'one-codegen')

    # verify arguments
    _verify_arg(parser, args)

    # make a command to run given backend driver
    dir_path = os.path.dirname(os.path.realpath(__file__))
    codegen_path = os.path.join(dir_path, getattr(args, 'backend') + '-compile')
    codegen_cmd = [codegen_path] + unknown_args
    if _utils._is_valid_attr(args, 'command'):
        codegen_cmd += getattr(args, 'command').split()

    # run backend driver
    with subprocess.Popen(
            codegen_cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            bufsize=1) as p:
        for line in p.stdout:
            sys.stdout.buffer.write(line)


if __name__ == '__main__':
    main()
