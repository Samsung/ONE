#!/usr/bin/env python

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import tempfile

import one_utils as _utils


def _get_parser():
    parser = argparse.ArgumentParser(description='command line tool for code generation')

    _utils._add_default_arg(parser)

    parser.add_argument('-b', '--backend', type=str, help='backend name to use')

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not _utils._is_valid_attr(args, 'backend'):
        missing.append('-b/--backend')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args, unknown_args = parser.parse_known_args()
    # print version
    if args.version:
        _utils._print_version_and_exit(__file__)

    return args, unknown_args


def main():
    # parse arguments
    parser = _get_parser()
    args, unknown_args = _parse_arg(parser)

    # parse configuration file
    _utils._parse_cfg(args)

    # verify arguments
    _verify_arg(parser, args)

    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    with open(logfile_path, 'wb') as f:
        # make a command to run given backend driver
        codegen_path = os.path.join(dir_path, getattr(args, 'backend') + '-compile')
        codegen_cmd = [codegen_path] + unknown_args

        f.write((' '.join(codegen_cmd) + '\n').encode())

        # run backend driver
        with subprocess.Popen(
                codegen_cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                bufsize=1) as p:
            for line in p.stdout:
                sys.stdout.buffer.write(line)
                f.write(line)


if __name__ == '__main__':
    main()
