#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from argparse import ArgumentParser
from configparser import ConfigParser
import os
import sys
from types import SimpleNamespace
from typing import List

from onelib.CfgRunner import CfgRunner
from onelib.WorkflowRunner import WorkflowRunner
import onelib.utils as oneutils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def run_subtools():
    """
    Run one-cmds tools directly.

    _onecc_ allows users to run one-cmds tools directly as well as using configuraiton files.

    E.g. $ onecc -C ${CFG_FILE}
         $ onecc import tflite -i ${INPUT} -o ${OUTPUT} ## HERE
        
    Please refer to above `subtool_list` for the support list of sub-tools.
    
    This function checks if given sub-tool exists and run it directly.
    """
    subtool_keys: List[str] = oneutils.one_cmd_list()
    if len(sys.argv) > 1:
        one_cmd = sys.argv[1]
        options: List[str] = sys.argv[2:]
        if one_cmd in subtool_keys:
            oneutils.run(options, one_cmd=one_cmd)
            sys.exit(0)


def get_parser():
    onecc_usage = 'onecc [-h] [-v] [-C CONFIG | -W WORKFLOW] [-b BACKEND | -T TARGET] [-O OPTIMIZATION] [COMMAND <args>]'
    onecc_desc = 'Run ONE driver via several commands or configuration file'
    parser = ArgumentParser(description=onecc_desc, usage=onecc_usage)

    oneutils.add_default_arg(parser)

    opt_name_list: List[str] = oneutils.get_optimization_list(get_name=True)
    opt_name_list = ['-' + s for s in opt_name_list]
    if not opt_name_list:
        opt_help_message = '(No available optimization options)'
    else:
        opt_help_message = '(Available optimization options: ' + ', '.join(
            opt_name_list) + ')'
    opt_help_message = 'optimization name to use ' + opt_help_message
    parser.add_argument('-O', type=str, metavar='OPTIMIZATION', help=opt_help_message)

    parser.add_argument('-W',
                        '--workflow',
                        type=str,
                        metavar='WORKFLOW',
                        help='run with workflow file')

    parser.add_argument('-b',
                        '--backend',
                        type=str,
                        help='generate code for given backend')

    target_name_list: List[str] = oneutils.get_target_list(get_name=True)
    if not target_name_list:
        target_help_message = '(No available target)'
    else:
        target_help_message = '(Available target: ' + ', '.join(target_name_list) + ')'
    target_help_message = 'run with specific target of the backend ' + target_help_message
    parser.add_argument('-T', '--target', type=str, help=target_help_message)

    # just for help message
    compile_group = parser.add_argument_group('compile to circle model')
    ONE_CMD = oneutils.ONE_CMD
    for tool, desc in ONE_CMD['compile'].items():
        compile_group.add_argument(tool, action='store_true', help=desc)

    package_group = parser.add_argument_group('package circle model')
    for tool, desc in ONE_CMD['package'].items():
        package_group.add_argument(tool, action='store_true', help=desc)

    backend_group = parser.add_argument_group('run backend tools')
    for tool, desc in ONE_CMD['backend'].items():
        backend_group.add_argument(tool, action='store_true', help=desc)

    return parser


def parse_arg(parser: ArgumentParser):
    args = parser.parse_args()
    # print version
    if args.version:
        oneutils.print_version_and_exit(__file__)

    return args


def verify_backend_args(parser: ArgumentParser, args):
    """
    Verify arguments for backend tools.
    """
    cfgparser: ConfigParser = oneutils.get_config_parser()
    cfgparser.read(args.config)

    for driver in ['one-profile', 'one-codegen']:
        if not driver in cfgparser:
            continue

        cfg_args = SimpleNamespace()
        oneutils.parse_cfg(args.config, driver, cfg_args)
        cmd_backend_exist = oneutils.is_valid_attr(args, 'backend')
        cfg_backend_exist = oneutils.is_valid_attr(cfg_args, 'backend')
        cfg_backends_exist = oneutils.is_valid_attr(cfg_args, 'backends')

        if cfg_backend_exist and cfg_backends_exist:
            parser.error(
                "'backend' option and 'backends' option cannot be used simultaneously.")

        # Check if given backend from command line exists in the configuration file
        if cmd_backend_exist and cfg_backend_exist:
            if args.backend != cfg_args.backend:
                parser.error('Not found the command of given backend')

        if cfg_backends_exist:
            cfg_backends = getattr(cfg_args, 'backends').split(',')
            # check if commands of given backends exist
            for b in cfg_backends:
                if not oneutils.is_valid_attr(cfg_args, b):
                    parser.error('Not found the command for ' + b)

            # Check if given backend from command line exists in the configuration file
            if cmd_backend_exist:
                if args.backend not in cfg_backends:
                    parser.error('Not found the command of given backend')


def verify_arg(parser: ArgumentParser, args):
    """Verify given arguments"""
    # check if required arguments is given
    if not oneutils.is_valid_attr(args, 'config') and not oneutils.is_valid_attr(
            args, 'workflow'):
        parser.error('-C/--config or -W/--workflow argument is required')
    # check if given optimization option exists
    opt_name_list: List[str] = oneutils.get_optimization_list(get_name=True)
    opt_name_list = [oneutils.remove_prefix(s, 'O') for s in opt_name_list]
    if oneutils.is_valid_attr(args, 'O'):
        if ' ' in getattr(args, 'O'):
            parser.error('Not allowed to have space in the optimization name')
        if not getattr(args, 'O') in opt_name_list:
            parser.error('Invalid optimization option')

    if oneutils.is_valid_attr(args, 'backend') and oneutils.is_valid_attr(
            args, 'workflow'):
        parser.error('\'backend\' option can be used only with \'config\' option')
    if oneutils.is_valid_attr(args, 'backend') and oneutils.is_valid_attr(args, 'target'):
        parser.error(
            '\'backend\' and \'target\' are mutually exclusive option. \'target\' option automatically set a backend.'
        )

    if oneutils.is_valid_attr(args, 'backend'):
        verify_backend_args(parser, args)


def main():
    run_subtools()

    parser: ArgumentParser = get_parser()
    args = parse_arg(parser)
    verify_arg(parser, args)

    bin_dir = os.path.dirname(os.path.realpath(__file__))
    if oneutils.is_valid_attr(args, 'config'):
        runner = CfgRunner(args.config)
        runner.detect_import_drivers(bin_dir)
        runner.add_opt(getattr(args, 'O', None))
        runner.set_backend(getattr(args, 'backend', None))
        runner.set_target(getattr(args, 'target', None))
        runner.run(bin_dir)
    elif oneutils.is_valid_attr(args, 'workflow'):
        runner = WorkflowRunner(args.workflow)
        runner.run(bin_dir)


if __name__ == '__main__':
    oneutils.safemain(main, __file__)
