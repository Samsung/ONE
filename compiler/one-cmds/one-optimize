#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"                  # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import tempfile

import utils as _utils


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to optimize circle model')

    _utils._add_default_arg(parser)

    ## utility arguments
    utility_group = parser.add_argument_group('arguments for utility')

    utility_group.add_argument(
        '-p',
        '--generate_profile_data',
        action='store_true',
        help='generate profiling data')

    ## circle2circle arguments
    circle2circle_group = parser.add_argument_group('arguments for optimization')

    # input and output path.
    circle2circle_group.add_argument(
        '-i', '--input_path', type=str, help='full filepath of the input file')
    circle2circle_group.add_argument(
        '-o', '--output_path', type=str, help='full filepath of the output file')

    # optimization pass
    circle2circle_group.add_argument(
        '--O1', action='store_true', help='enable O1 optimization pass')
    circle2circle_group.add_argument(
        '--convert_nchw_to_nhwc',
        action='store_true',
        help="""Experimental: This will convert NCHW operators to NHWC under the
        assumption that input model is NCHW.""")
    circle2circle_group.add_argument(
        '--nchw_to_nhwc_preserve_input_shape',
        action='store_true',
        help='preserve the input shape of the model (argument for convert_nchw_to_nhwc)')
    circle2circle_group.add_argument(
        '--nchw_to_nhwc_preserve_output_shape',
        action='store_true',
        help='preserve the output shape of the model (argument for convert_nchw_to_nhwc)')
    circle2circle_group.add_argument(
        '--fold_add_v2', action='store_true', help='fold AddV2 op with constant inputs')
    circle2circle_group.add_argument(
        '--fold_cast', action='store_true', help='fold Cast op with constant input')
    circle2circle_group.add_argument(
        '--fold_dequantize', action='store_true', help='fold Dequantize op')
    circle2circle_group.add_argument(
        '--fold_sparse_to_dense', action='store_true', help='fold SparseToDense op')
    circle2circle_group.add_argument(
        '--forward_reshape_to_unaryop', action='store_true', help='Forward Reshape op')
    circle2circle_group.add_argument(
        '--fuse_add_with_tconv', action='store_true', help='fuse Add op to Transposed')
    circle2circle_group.add_argument(
        '--fuse_batchnorm_with_conv',
        action='store_true',
        help='fuse BatchNorm op to Convolution op')
    circle2circle_group.add_argument(
        '--fuse_batchnorm_with_dwconv',
        action='store_true',
        help='fuse BatchNorm op to Depthwise Convolution op')
    circle2circle_group.add_argument(
        '--fuse_batchnorm_with_tconv',
        action='store_true',
        help='fuse BatchNorm op to Transposed Convolution op')
    circle2circle_group.add_argument(
        '--fuse_bcq', action='store_true', help='apply Binary Coded Quantization')
    circle2circle_group.add_argument(
        '--fuse_preactivation_batchnorm',
        action='store_true',
        help='fuse BatchNorm operators of pre-activations to Convolution op')
    circle2circle_group.add_argument(
        '--make_batchnorm_gamma_positive',
        action='store_true',
        help="""make negative gamma of BatchNorm to a small positive value (1e-10).
        Note that this pass can change the execution result of the model.
        So, use it only when the impact is known to be acceptable.""")
    circle2circle_group.add_argument(
        '--fuse_activation_function',
        action='store_true',
        help='fuse Activation function to a preceding operator')
    circle2circle_group.add_argument(
        '--fuse_instnorm', action='store_true', help='fuse ops to InstanceNorm operator')
    circle2circle_group.add_argument(
        '--replace_cw_mul_add_with_depthwise_conv',
        action='store_true',
        help='replace channel-wise Mul/Add with DepthwiseConv2D')
    circle2circle_group.add_argument(
        '--remove_redundant_reshape',
        action='store_true',
        help='fuse or remove subsequent Reshape ops')
    circle2circle_group.add_argument(
        '--remove_redundant_transpose',
        action='store_true',
        help='fuse or remove subsequent Transpose ops')
    circle2circle_group.add_argument(
        '--remove_unnecessary_reshape',
        action='store_true',
        help='remove unnecessary reshape ops')
    circle2circle_group.add_argument(
        '--remove_unnecessary_slice',
        action='store_true',
        help='remove unnecessary slice ops')
    circle2circle_group.add_argument(
        '--remove_unnecessary_strided_slice',
        action='store_true',
        help='remove unnecessary strided slice ops')
    circle2circle_group.add_argument(
        '--remove_unnecessary_split',
        action='store_true',
        help='remove unnecessary split ops')
    circle2circle_group.add_argument(
        '--resolve_customop_add',
        action='store_true',
        help='convert Custom(Add) op to Add op')
    circle2circle_group.add_argument(
        '--resolve_customop_batchmatmul',
        action='store_true',
        help='convert Custom(BatchMatmul) op to BatchMatmul op')
    circle2circle_group.add_argument(
        '--resolve_customop_matmul',
        action='store_true',
        help='convert Custom(Matmul) op to Matmul op')
    circle2circle_group.add_argument(
        '--shuffle_weight_to_16x1float32',
        action='store_true',
        help="""convert weight format of FullyConnected op to SHUFFLED16x1FLOAT32.
        Note that it only converts weights whose row is a multiple of 16""")
    circle2circle_group.add_argument(
        '--substitute_pack_to_reshape',
        action='store_true',
        help='convert single input Pack op to Reshape op')
    circle2circle_group.add_argument(
        '--substitute_squeeze_to_reshape',
        action='store_true',
        help='convert certain condition Squeeze to Reshape')
    circle2circle_group.add_argument(
        '--substitute_transpose_to_reshape',
        action='store_true',
        help='convert certain condition Transpose to Reshape')
    circle2circle_group.add_argument(
        '--transform_min_max_to_relu6',
        action='store_true',
        help='transform Minimum-Maximum pattern to Relu6 op')

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not _utils._is_valid_attr(args, 'input_path'):
        missing.append('-i/--input_path')
    if not _utils._is_valid_attr(args, 'output_path'):
        missing.append('-o/--output_path')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        _utils._print_version_and_exit(__file__)

    return args


def _optimize(args):
    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    with open(logfile_path, 'wb') as f:
        # make a command to optimize circle model
        circle2circle_path = os.path.join(dir_path, 'circle2circle')
        circle2circle_cmd = _utils._make_circle2circle_cmd(args, circle2circle_path,
                                                           getattr(args, 'input_path'),
                                                           getattr(args, 'output_path'))

        f.write((' '.join(circle2circle_cmd) + '\n').encode())

        # optimize
        with subprocess.Popen(
                circle2circle_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                bufsize=1) as p:
            for line in p.stdout:
                sys.stdout.buffer.write(line)
                f.write(line)
        if p.returncode != 0:
            sys.exit(p.returncode)


def main():
    # parse arguments
    parser = _get_parser()
    args = _parse_arg(parser)

    # parse configuration file
    _utils._parse_cfg(args, 'one-optimize')

    # verify arguments
    _verify_arg(parser, args)

    # optimize
    _optimize(args)


if __name__ == '__main__':
    main()
