#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
import tempfile
import onnx

# ONNX legalizer is an optional feature
# It enables conversion of some operations, but in experimental phase for now
try:
    import onnx_legalizer
    _onnx_legalizer_enabled = True
except ImportError:
    _onnx_legalizer_enabled = False

import onelib.make_cmd as _make_cmd
import onelib.utils as oneutils

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def get_driver_cfg_section():
    return "one-import-onnx"


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to convert ONNX to circle')

    oneutils.add_default_arg(parser)

    parser.add_argument('-i',
                        '--input_path',
                        type=str,
                        help='full filepath of the input file')
    parser.add_argument('-o',
                        '--output_path',
                        type=str,
                        help='full filepath of the output file')

    parser.add_argument('--unroll_rnn', action='store_true', help='Unroll RNN operators')
    parser.add_argument('--unroll_lstm',
                        action='store_true',
                        help='Unroll LSTM operators')
    parser.add_argument(
        '--keep_io_order',
        action='store_true',
        help=
        'Ensure generated circle model preserves the I/O order of the original onnx model.'
    )

    parser.add_argument(
        '--dynamic_batch_to_single_batch',
        action='store_true',
        help='Convert dynamic batch size (first dimension) of inputs to 1.')

    # NOTE How one-import-onnx-ext is called;
    # - applies only when one-import-onnx-ext is installed
    # - default onnx2circle is called for conversion
    # - if onnx2circle fails, one-import-onnx-ext is called
    # - if 'force_ext' is given, skip onnx2circle and call one-import-onnx-ext
    # - if 'disable_ext' is given, one-import-onnx-ext is not called
    # - both 'force_ext', 'disable_ext' should not be set

    # converter version
    extension_group = parser.add_argument_group('extension arguments')
    use_extension = extension_group.add_mutually_exclusive_group()

    # use one-import-onnx-ext in the first place
    use_extension.add_argument(
        '--force_ext',
        action='store_true',
        help='Use one-import-onnx-ext in first attempt and skip default tool')

    # do not call one-import-onnx-ext when default one-import-onnx fails
    use_extension.add_argument('--disable_ext',
                               action='store_true',
                               help='Disable one-import-onnx-ext for second attempt')

    # save intermediate file(s)
    parser.add_argument('--save_intermediate',
                        action='store_true',
                        help='Save intermediate files to output folder')

    # experimental options
    parser.add_argument('--experimental_disable_batchmatmul_unfold',
                        action='store_true',
                        help='Experimental disable BatchMatMul unfold')

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not oneutils.is_valid_attr(args, 'input_path'):
        missing.append('-i/--input_path')
    if not oneutils.is_valid_attr(args, 'output_path'):
        missing.append('-o/--output_path')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        oneutils.print_version_and_exit(__file__)

    return args


def _apply_verbosity(verbosity):
    # NOTE
    # TF_CPP_MIN_LOG_LEVEL
    #   0 : INFO + WARNING + ERROR + FATAL
    #   1 : WARNING + ERROR + FATAL
    #   2 : ERROR + FATAL
    #   3 : FATAL
    if verbosity:
        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'
    else:
        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


def _force_ext(args):
    if oneutils.is_valid_attr(args, 'force_ext'):
        return True
    env_force_ext = os.getenv('ONE_IMPORT_ONNX_EXT_FORCE')
    if env_force_ext == '1' or env_force_ext == 'Y':
        return True
    return False


def _disable_ext(args):
    if oneutils.is_valid_attr(args, 'disable_ext'):
        return True
    env_disable_ext = os.getenv('ONE_IMPORT_ONNX_EXT_DISABLE')
    if env_disable_ext == '1' or env_disable_ext == 'Y':
        return True
    return False


def _check_ext():
    dir_path = os.path.dirname(os.path.realpath(__file__))
    ext_path = os.path.join(dir_path, 'one-import-onnx-ext')
    if (os.path.isfile(ext_path)):
        return ext_path
    return None


def _check_onnx2circle():
    # check if onnx2circle exist
    dir_path = os.path.dirname(os.path.realpath(__file__))
    o2c_path = os.path.join(dir_path, 'onnx2circle')
    if not os.path.isfile(o2c_path):
        o2c_path = '/usr/share/circletools/bin/onnx2circle'
        if not os.path.isfile(o2c_path):
            print("one-import-onnx: onnx2circle converter not found")
            sys.exit(1)
    return o2c_path


def _convert(args):
    _apply_verbosity(args.verbose)

    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    # get default converter
    onnx2circle_path = _check_onnx2circle()

    # get import onnx extension path
    ext_path = _check_ext()

    onnx_to_convert_path = getattr(args, 'input_path')
    basename = os.path.basename(onnx_to_convert_path)
    model_updated = False

    with open(logfile_path, 'wb') as f, tempfile.TemporaryDirectory() as tmpdir:
        # save intermediate
        if oneutils.is_valid_attr(args, 'save_intermediate'):
            tmpdir = os.path.dirname(logfile_path)

        onnx_model = onnx.load(onnx_to_convert_path)
        if _onnx_legalizer_enabled:
            options = onnx_legalizer.LegalizeOptions
            options.unroll_rnn = oneutils.is_valid_attr(args, 'unroll_rnn')
            options.unroll_lstm = oneutils.is_valid_attr(args, 'unroll_lstm')
            if options.unroll_rnn or options.unroll_lstm:
                onnx_legalizer.legalize(onnx_model, options)
                model_updated = True

        run_default_import = True
        if ext_path:
            if _force_ext(args):
                run_default_import = False

        if model_updated or ext_path != None:
            fixed_path = os.path.join(tmpdir, os.path.splitext(basename)[0] + '~.onnx')
            onnx.save(onnx_model, fixed_path)
            onnx_to_convert_path = fixed_path

        res_conv = -1
        if run_default_import:
            if _force_ext(args):
                print(
                    "onnx-import-onnx: 'force_ext' is True, "
                    "but onnx-import-onnx-ext is not installed. "
                    "default converter is used.",
                    flush=True)

            try:
                o2c_cmd = [onnx2circle_path]
                if oneutils.is_valid_attr(args, 'dynamic_batch_to_single_batch'):
                    o2c_cmd.append('--dynamic_batch_to_single_batch')
                o2c_cmd.append(onnx_to_convert_path)
                o2c_cmd.append(getattr(args, 'output_path'))
                res_conv = oneutils.run_ret(o2c_cmd, logfile=f)
            except:
                res_conv = -1

        # if default conversion fails, try with one-import-onnx-ext if available
        if ext_path and not _disable_ext(args):
            if res_conv != 0:
                if run_default_import:
                    print(
                        "onnx-import-onnx: Conversion with onnx2circle failed. "
                        "Fallback to use one-import-onnx-ext",
                        flush=True)
                # call extension with options
                ext_cmd = [ext_path]
                if oneutils.is_valid_attr(args, 'unroll_rnn'):
                    ext_cmd.append('--unroll_rnn')
                if oneutils.is_valid_attr(args, 'unroll_lstm'):
                    ext_cmd.append('--unroll_lstm')
                if oneutils.is_valid_attr(args,
                                          'experimental_disable_batchmatmul_unfold'):
                    ext_cmd.append('--experimental_disable_batchmatmul_unfold')
                if oneutils.is_valid_attr(args, 'save_intermediate'):
                    ext_cmd.append('--save_intermediate')
                if oneutils.is_valid_attr(args, 'keep_io_order'):
                    ext_cmd.append('--keep_io_order')
                ext_cmd.append(onnx_to_convert_path)
                ext_cmd.append(getattr(args, 'output_path'))
                res_conv = oneutils.run_ret(ext_cmd, logfile=f)

        sys.exit(res_conv)


def main():
    # parse arguments
    parser = _get_parser()
    args = _parse_arg(parser)

    # parse configuration file
    oneutils.parse_cfg(args.config, 'one-import-onnx', args)

    # verify arguments
    _verify_arg(parser, args)

    # convert
    _convert(args)


if __name__ == '__main__':
    oneutils.safemain(main, __file__)
