#!/usr/bin/env bash
''''export SCRIPT_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)" # '''
''''export PY_PATH=${SCRIPT_PATH}/venv/bin/python                                       # '''
''''test -f ${PY_PATH} && exec ${PY_PATH} "$0" "$@"                                     # '''
''''echo "Error: Virtual environment not found. Please run 'one-prepare-venv' command." # '''
''''exit 255                                                                            # '''

# Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
import tempfile

import onelib.make_cmd as _make_cmd
import onelib.utils as oneutils
import generate_bcq_output_arrays as _bcq_info_gen

# TODO Find better way to suppress trackback on error
sys.tracebacklimit = 0


def get_driver_cfg_section():
    return "one-import-bcq"


def _get_parser():
    parser = argparse.ArgumentParser(
        description='command line tool to convert TensorFlow with BCQ to circle')

    oneutils.add_default_arg(parser)

    ## tf2tfliteV2 arguments
    tf2tfliteV2_group = parser.add_argument_group('converter arguments')

    # converter version
    converter_version = tf2tfliteV2_group.add_mutually_exclusive_group()
    converter_version.add_argument('--v1',
                                   action='store_const',
                                   dest='converter_version_cmd',
                                   const='--v1',
                                   help='use TensorFlow Lite Converter 1.x')
    converter_version.add_argument('--v2',
                                   action='store_const',
                                   dest='converter_version_cmd',
                                   const='--v2',
                                   help='use TensorFlow Lite Converter 2.x')

    parser.add_argument('--converter_version', type=str, help=argparse.SUPPRESS)

    # input and output path.
    tf2tfliteV2_group.add_argument('-i',
                                   '--input_path',
                                   type=str,
                                   help='full filepath of the input file')
    tf2tfliteV2_group.add_argument('-o',
                                   '--output_path',
                                   type=str,
                                   help='full filepath of the output file')

    # input and output arrays.
    tf2tfliteV2_group.add_argument('-I',
                                   '--input_arrays',
                                   type=str,
                                   help='names of the input arrays, comma-separated')
    tf2tfliteV2_group.add_argument(
        '-s',
        '--input_shapes',
        type=str,
        help=
        'shapes corresponding to --input_arrays, colon-separated (ex:"1,4,4,3:1,20,20,3")'
    )
    tf2tfliteV2_group.add_argument('-O',
                                   '--output_arrays',
                                   type=str,
                                   help='names of the output arrays, comma-separated')

    return parser


def _verify_arg(parser, args):
    """verify given arguments"""
    # check if required arguments is given
    missing = []
    if not oneutils.is_valid_attr(args, 'input_path'):
        missing.append('-i/--input_path')
    if not oneutils.is_valid_attr(args, 'output_path'):
        missing.append('-o/--output_path')
    if len(missing):
        parser.error('the following arguments are required: ' + ' '.join(missing))


def _parse_arg(parser):
    args = parser.parse_args()
    # print version
    if args.version:
        oneutils.print_version_and_exit(__file__)

    return args


def _make_generate_bcq_metadata_cmd(args, driver_path, output_path):
    """make a command for running generate_bcq_metadata"""
    cmd = [sys.executable, driver_path]
    # input_path
    if oneutils.is_valid_attr(args, 'input_path'):
        cmd.append('--input_path')
        cmd.append(os.path.expanduser(getattr(args, 'input_path')))
    # output_path
    if oneutils.is_valid_attr(args, 'output_path'):
        cmd.append('--output_path')
        cmd.append(os.path.expanduser(output_path))
    # output_arrays
    if oneutils.is_valid_attr(args, 'output_arrays'):
        cmd.append('--output_arrays')
        cmd.append(getattr(args, 'output_arrays'))

    return cmd


def _convert(args):
    # get file path to log
    dir_path = os.path.dirname(os.path.realpath(__file__))
    logfile_path = os.path.realpath(args.output_path) + '.log'

    with open(logfile_path, 'wb') as f, tempfile.TemporaryDirectory() as tmpdir:
        # make a command to generate BCQ information metadata
        generate_bcq_metadata_path = os.path.join(dir_path, 'generate_bcq_metadata.py')
        generate_bcq_metadata_output_path = os.path.join(
            tmpdir,
            os.path.splitext(os.path.basename(args.input_path))[0] + '_withmeta.pb')
        generate_bcq_metadata_cmd = _make_generate_bcq_metadata_cmd(
            args, generate_bcq_metadata_path, generate_bcq_metadata_output_path)

        f.write((' '.join(generate_bcq_metadata_cmd) + '\n').encode())

        # generate BCQ information metadata
        oneutils.run(generate_bcq_metadata_cmd, logfile=f)

        # get output_arrays with BCQ
        bcq_output_arrays = _bcq_info_gen.get_bcq_output_arrays(
            generate_bcq_metadata_output_path, getattr(args, 'output_arrays'))

        # make a command to convert from tf with BCQ to tflite
        tf2tfliteV2_path = os.path.join(dir_path, 'tf2tfliteV2.py')
        tf2tfliteV2_output_path = os.path.join(
            tmpdir,
            os.path.splitext(
                os.path.basename(generate_bcq_metadata_output_path))[0]) + '.tflite'
        tf2tfliteV2_cmd = _make_cmd.make_tf2tfliteV2_cmd(
            args, tf2tfliteV2_path, generate_bcq_metadata_output_path,
            tf2tfliteV2_output_path)
        try:
            output_arrays_idx = tf2tfliteV2_cmd.index('--output_arrays')
            tf2tfliteV2_cmd[output_arrays_idx + 1] = ','.join(bcq_output_arrays)
        except ValueError:
            pass

        f.write((' '.join(tf2tfliteV2_cmd) + '\n').encode())

        # convert tf to tflite
        oneutils.run(tf2tfliteV2_cmd, logfile=f)

        # make a command to convert from tflite to circle
        tflite2circle_path = os.path.join(dir_path, 'tflite2circle')
        tflite2circle_cmd = _make_cmd.make_tflite2circle_cmd(tflite2circle_path,
                                                             tf2tfliteV2_output_path,
                                                             getattr(args, 'output_path'))

        f.write((' '.join(tflite2circle_cmd) + '\n').encode())

        # convert tflite to circle
        oneutils.run(tflite2circle_cmd, logfile=f)


def main():
    # parse arguments
    parser = _get_parser()
    args = _parse_arg(parser)

    # parse configuration file
    oneutils.parse_cfg(args.config, 'one-import-bcq', args)

    # verify arguments
    _verify_arg(parser, args)

    # _convert
    _convert(args)


if __name__ == '__main__':
    oneutils.safemain(main, __file__)
